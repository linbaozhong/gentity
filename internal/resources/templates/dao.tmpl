// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

{{- $tablename := .TableName}}
{{- $structName := .StructName}}
{{- $package := .PackageName}}
{{- $structNameLower := lower .StructName}}

package dao

import (
	{{- if .HasCache}}
	"time"
	"encoding/json"
	"golang.org/x/sync/singleflight"
	"github.com/linbaozhong/gentity/pkg/cachego"
	"github.com/linbaozhong/gentity/pkg/conv"
	{{- end}}
	"context"
	"database/sql"
	"{{.ModulePath}}/{{$package}}"
	"{{.ModulePath}}/define/table/tbl{{$structNameLower}}"
{{- if ne .RelationX.Name ""}}
	"{{.ModulePath}}/define/table/tbl{{lower .RelationX.Type}}"
{{- end}}
	"github.com/linbaozhong/gentity/pkg/ace"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

type {{$tablename}}er interface {
	dialect.Daoer
	ace.Cruder
	// InsertOne 插入一条数据，返回 LastInsertId
	// cols: 要插入的列名
	InsertOne(ctx context.Context, bean *{{$package}}.{{$structName}}, cols ...dialect.Field) (bool, error)
	// InsertBatch 批量插入多条数据,返回 RowsAffected
	// cols: 要插入的列名
	InsertBatch(ctx context.Context, beans []*{{$package}}.{{$structName}}, cols ...dialect.Field) (int64, error)
    // UpdateById 按主键更新一条数据
	UpdateById(ctx context.Context, {{.PrimaryKey.Col}} {{.PrimaryKey.Type}}, sets ...dialect.Setter) (bool, error)
	// UpdateBatch 批量更新多条数据
	// cols: 要更新的列名
	UpdateBatch(ctx context.Context, beans []*{{$package}}.{{$structName}}, cols ...dialect.Field) (bool, error)
	// DeleteById 按主键删除一条数据
    DeleteById(ctx context.Context,{{.PrimaryKey.Col}} {{.PrimaryKey.Type}}) (bool, error)
	// SelectAll 读取所有数据
	SelectAll(ctx context.Context, s *ace.Selector) ([]{{$package}}.{{$structName}}, bool, error)
	// Find4Cols 分页查询指定列，返回一个slice
	Find4Cols(ctx context.Context, pageIndex, pageSize uint, cols []dialect.Field, cond []dialect.Condition, sort ...dialect.Order) ([]{{$package}}.{{$structName}}, bool, error)
	// Find 分页查询，返回一个slice
	Find(ctx context.Context, pageIndex, pageSize uint, cond []dialect.Condition, sort ...dialect.Order) ([]{{$package}}.{{$structName}}, bool, error)
	// Get4Cols 读取一个对象的指定列
	Get4Cols(ctx context.Context, cols []dialect.Field, cond []dialect.Condition, sort ...dialect.Order) (*{{$package}}.{{$structName}}, bool, error)
	// GetByID 按主键查询，返回一个对象
	GetByID(ctx context.Context,{{.PrimaryKey.Col}} {{.PrimaryKey.Type}}, cols ...dialect.Field) (*{{$package}}.{{$structName}}, bool, error)
	// Get 按条件读取一个对象
	Get(ctx context.Context, cond []dialect.Condition, sort ...dialect.Order) (*{{$package}}.{{$structName}}, bool, error)
{{- if ne .RelationX.Name ""}}
	// Find4Cols 分页查询指定列，返回一个slice
	Find4ColsX(ctx context.Context, pageIndex, pageSize uint, cols []dialect.Field, cond []dialect.Condition, sort ...dialect.Order) ([]{{$package}}.{{$structName}}, bool, error)
	// Find 分页查询，返回一个slice
	FindX(ctx context.Context, pageIndex, pageSize uint, cond []dialect.Condition, sort ...dialect.Order) ([]{{$package}}.{{$structName}}, bool, error)
	// Get4Cols 读取一个对象的指定列
	Get4ColsX(ctx context.Context, cols []dialect.Field, cond []dialect.Condition, sort ...dialect.Order) (*{{$package}}.{{$structName}}, bool, error)
	// GetByID 按主键查询，返回一个对象
	GetByIDX(ctx context.Context,{{.PrimaryKey.Col}} {{.PrimaryKey.Type}}, cols ...dialect.Field) (*{{$package}}.{{$structName}}, bool, error)
	// Get 按条件读取一个对象
	GetX(ctx context.Context, cond []dialect.Condition, sort ...dialect.Order) (*{{$package}}.{{$structName}}, bool, error)
{{- end}}
	// GetFirstCell 按条件读取第一行的第一个字段
	GetFirstCell(ctx context.Context,col dialect.Field, cond []dialect.Condition, sort ...dialect.Order) (any, bool, error)
	//
	IDs(ctx context.Context, cond []dialect.Condition, sort ...dialect.Order) ([]any, error)
	//
	Columns(ctx context.Context, col dialect.Field, cond []dialect.Condition, sort ...dialect.Order) ([]any, error)
}

type dao{{$structName}} struct {
	db    ace.Executer
{{- if .HasCache}}
	cache cachego.Cache
	sg singleflight.Group
{{- end}}
}

func {{$structName}}(exec ace.Executer) {{$tablename}}er {
	_obj := &dao{{$structName}}{}
	_obj.db = exec
{{- if .HasCache}}
	_obj.cache = exec.Cache({{$package}}.{{$structName}}TableName)
{{- end}}
	return _obj
}

// C Create {{$tablename}}
func (p *dao{{$structName}}) C() *ace.Creator {
	return p.db.C({{$package}}.{{$structName}}TableName)
}

// R Read {{$tablename}}
func (p *dao{{$structName}}) R() *ace.Selector{
	return p.db.R({{$package}}.{{$structName}}TableName)
}

// U Update {{$tablename}}
func (p *dao{{$structName}}) U() *ace.Updater{
	return p.db.U({{$package}}.{{$structName}}TableName)
}

// D Delete {{$tablename}}
func (p *dao{{$structName}}) D() *ace.Deleter{
	return p.db.D({{$package}}.{{$structName}}TableName)
}


// Insert 返回 LastInsertId
func (p *dao{{$structName}}) Insert(ctx context.Context, sets ...dialect.Setter) (int64, error) {
	if len(sets) == 0 {
		return 0, dialect.ErrSetterEmpty
	}
	_result, e := p.C().
	    Set(sets...).
	    Exec(ctx)
	if e != nil {
		log.Error(e)
		return 0, e
	}
	return _result.LastInsertId()
}

// InsertOne 返回 LastInsertId
// cols: 要插入的列名
func (p *dao{{$structName}}) InsertOne(ctx context.Context, bean *{{$package}}.{{$structName}}, cols ...dialect.Field) (bool, error) {
	_result, e := p.C().
	    Cols(cols...).
	    Struct(ctx, bean)
	if e != nil {
		log.Error(e)
		return false, e
	}

    bean.AssignPrimaryKeyValues(_result)

	_n, e := _result.RowsAffected()
	return _n > 0, e
}

// InsertBatch 批量插入,返回 RowsAffected。禁止在事务中使用
// cols: 要插入的列名
func (p *dao{{$structName}}) InsertBatch(ctx context.Context, beans []*{{$package}}.{{$structName}}, cols ...dialect.Field) (int64, error) {
	_lens := len(beans)
	if _lens == 0 {
		return 0, dialect.ErrBeanEmpty
	}
	_args := make([]dialect.Modeler, 0, _lens)
	for _, _bean := range beans {
		_args = append(_args, _bean)
	}
	_result, e := p.C().
	    Cols(cols...).
	    StructBatch(ctx, _args...)
	if e != nil {
		log.Error(e)
		return 0, e
	}

	return _result.RowsAffected()
}

// Update
func (p *dao{{$structName}}) Update(ctx context.Context, sets []dialect.Setter, cond ...dialect.Condition) (bool, error) {
	if len(sets) == 0 {
		return false, dialect.ErrSetterEmpty
	}
	_result, e := p.U().
	    Where(cond...).
	    Set(sets...).
	    Exec(ctx)
	if e != nil {
		log.Error(e)
		return false, e
	}
	_n, e := _result.RowsAffected()
	return _n >= 0, e
}

// UpdateById
func (p *dao{{$structName}}) UpdateById(ctx context.Context,{{.PrimaryKey.Col}} {{.PrimaryKey.Type}}, sets ...dialect.Setter) (bool, error) {
    return p.Update(ctx,
        sets,
       	tbl{{$structNameLower}}.PrimaryKey.Eq({{.PrimaryKey.Col}}),
    )
}

// UpdateBatch 批量更新,禁止在事务中使用
// cols: 要更新的列名
func (p *dao{{$structName}}) UpdateBatch(ctx context.Context, beans []*{{$package}}.{{$structName}}, cols ...dialect.Field) (bool, error) {
	_lens := len(beans)
	if _lens == 0 {
		return false, dialect.ErrBeanEmpty
	}
	_args := make([]dialect.Modeler, 0, _lens)
	for _, _bean := range beans {
		_args = append(_args, _bean)
	}
	_result, e := p.U().
	    Cols(cols...).
	    StructBatch(ctx, _args...)
	if e != nil {
		log.Error(e)
		return false, e
	}
	_n, e := _result.RowsAffected()
	return _n >= 0, e
}

// Delete
func (p *dao{{$structName}}) Delete(ctx context.Context, cond ...dialect.Condition) (bool, error) {
	_result, e := p.D().
	    Where(cond...).
	    Exec(ctx)
	if e != nil {
		log.Error(e)
		return false, e
	}
	_n, e := _result.RowsAffected()
	return _n >= 0, e
}

// DeleteById
func (p *dao{{$structName}}) DeleteById(ctx context.Context, {{.PrimaryKey.Col}} {{.PrimaryKey.Type}}) (bool, error) {
    return p.Delete(ctx,
        tbl{{$structNameLower}}.PrimaryKey.Eq({{.PrimaryKey.Col}}),
	)
}

// SelectAll 查询所有
func (p *dao{{$structName}}) SelectAll(ctx context.Context, s *ace.Selector) ([]{{$package}}.{{$structName}}, bool, error) {
	if len(s.GetTableName()) == 0{
		s.SetTableName({{$package}}.{{$structName}}TableName)
	}

	_cols := s.GetCols()
	_rows, e := s.Query(ctx)
	if e != nil {
		log.Error(e)
		return nil, false, e
	}
	defer _rows.Close()

	_obj := {{$package}}.New{{$structName}}()
	_objs, has, e := _obj.Scan(_rows,_cols...)
	if has {
		return _objs, true, nil
	}
	log.Error(e)
	return nil, false, e
}

// Get4Cols 先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) Get4Cols(ctx context.Context, cols []dialect.Field, cond []dialect.Condition, sort ...dialect.Order) (*{{$package}}.{{$structName}}, bool, error) {
	_c := p.R()
	if len(cols) == 0 {
		_c.Cols(tbl{{$structNameLower}}.ReadableFields...)
	} else {
		_c.Cols(cols...)
	}

	_row, e := _c.Where(cond...).
		OrderField(sort...).
	    QueryRow(ctx)
	if e != nil {
		log.Error(e)
		return nil, false, e
	}

	_obj := {{$package}}.New{{$structName}}()

	e = _row.Scan(_obj.AssignPtr(cols...)...)
	switch e {
	case sql.ErrNoRows:
		return nil,false, nil
	case nil:
		return _obj,true, nil
	default:
		log.Error(e)
		return nil,false, e
	}
}

// Find4Cols 分页获取{{.TableName}} slice对象，先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) Find4Cols(ctx context.Context, pageIndex, pageSize uint, cols []dialect.Field, cond  []dialect.Condition, sort ...dialect.Order) ([]{{$package}}.{{$structName}}, bool, error) {
	_c := p.R()
	if len(cols) == 0 {
		_c.Cols(tbl{{$structNameLower}}.ReadableFields...)
	} else {
		_c.Cols(cols...)
	}
	//
	if pageSize == 0 {
		pageSize = dialect.PageSize
	}
	//
	_rows, e := _c.Where(cond...).
		OrderField(sort...).
	    Limit(pageSize, pageSize*pageIndex).
	    Query(ctx)
	if e != nil {
		log.Error(e)
		return nil, false, e
	}
	defer _rows.Close()

	_obj := {{$package}}.New{{$structName}}()

	_objs, has, e := _obj.Scan(_rows, cols...)
	if has {
		return _objs, true, nil
	}
	log.Error(e)
	return nil, false, e
}

// GetByID 按主键读取一个{{.TableName}}对象,先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) GetByID(ctx context.Context,{{.PrimaryKey.Col}} {{.PrimaryKey.Type}}, cols ...dialect.Field) (*{{$package}}.{{$structName}}, bool, error) {
{{- if .HasCache}}
	_obj,has,e:=p.getCache(ctx, {{.PrimaryKey.Col}})
	if has{
		return _obj,has,nil
	}

	_v, e, _ := p.sg.Do(conv.Any2String({{.PrimaryKey.Col}}), func() (any, error) {
		_obj, has, e = p.Get4Cols(ctx, cols, []dialect.Condition{tbl{{$structNameLower}}.PrimaryKey.Eq({{.PrimaryKey.Col}})})
		if has {
			e = p.setCache(ctx, _obj)
		}
		return _obj, e
	})
	if _v != nil {
		return _v.(*{{$package}}.{{$structName}}), true, e
	}

	return nil,false,e
{{- else}}
	return p.Get4Cols(ctx, cols, []dialect.Condition{tbl{{$structNameLower}}.PrimaryKey.Eq({{.PrimaryKey.Col}})})
{{- end}}
}

// Get 按条件读取一个{{.TableName}}对象,先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) Get(ctx context.Context, cond  []dialect.Condition, sort ...dialect.Order) (*{{$package}}.{{$structName}}, bool, error) {
	return p.Get4Cols(ctx, []dialect.Field{}, cond, sort...)
}

// GetFirstCell 按条件读取首行首列,先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) GetFirstCell(ctx context.Context,col dialect.Field, cond  []dialect.Condition, sort ...dialect.Order) (any, bool, error) {
	_c := p.R().Cols(col)
	_row, e := _c.Where(cond...).
		OrderField(sort...).
		QueryRow(ctx)
	if e != nil {
		log.Error(e)
		return nil,false, e
	}

	var _v any
	e = _row.Scan(&_v)
	switch e {
    case sql.ErrNoRows:
        return nil,false,nil
    case nil:
        return _v,true,nil
    default:
		log.Error(e)
        return nil,false,e
    }
}

// Find 按条件读取一个{{.TableName}} slice对象,先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) Find(ctx context.Context, pageIndex, pageSize uint, cond  []dialect.Condition, sort ...dialect.Order) ([]{{$package}}.{{$structName}}, bool, error) {
	return p.Find4Cols(ctx, pageIndex, pageSize, []dialect.Field{}, cond, sort...)
}


// IDs
func (p *dao{{$structName}}) IDs(ctx context.Context, cond  []dialect.Condition, sort ...dialect.Order) ([]any, error) {
	_c := p.R().Cols(tbl{{$structNameLower}}.PrimaryKey)
	_rows, e := _c.Where(cond...).
		OrderField(sort...).
	    Limit(dialect.MaxLimit).
	    Query(ctx)
	if e != nil {
		log.Error(e)
		return nil, e
	}
	defer _rows.Close()

	_ids := make([]any, 0, dialect.PageSize)
	for _rows.Next() {
	    var {{ .PrimaryKey.Col }} {{.PrimaryKey.Type}}
		if e = _rows.Scan(&{{.PrimaryKey.Col}}); e != nil {
			log.Error(e)
			return nil, e
		}
		_ids = append(_ids, {{.PrimaryKey.Col}})
	}

	return _ids, _rows.Err()
}

// Columns
func (p *dao{{$structName}}) Columns(ctx context.Context, col dialect.Field, cond  []dialect.Condition, sort ...dialect.Order) ([]any, error) {
	_c := p.R().Cols(col)
	_rows, e := _c.Where(cond...).
	    Limit(dialect.MaxLimit).
		OrderField(sort...).
	    Query(ctx)
	if e != nil {
		log.Error(e)
		return nil, e
	}
	defer _rows.Close()

	_cols := make([]any, 0, dialect.PageSize)
	for _rows.Next() {
		var _v any
		if e = _rows.Scan(&_v); e != nil {
			log.Error(e)
			return nil, e
		}
		_cols = append(_cols, _v)
	}
	return _cols, _rows.Err()
}

// Count
func (p *dao{{$structName}}) Count(ctx context.Context, cond ...dialect.Condition) (int64, error) {
	return p.R().Count(ctx, cond...)
}

// Sum
func (p *dao{{$structName}}) Sum(ctx context.Context, cols []dialect.Field, cond ...dialect.Condition) (map[string]any, error) {
	return p.R().Sum(ctx, cols, cond...)
}

// Exists
func (p *dao{{$structName}}) Exists(ctx context.Context, cond ...dialect.Condition) (bool, error) {
	_c := p.R().Cols(tbl{{$structNameLower}}.PrimaryKey).Where(cond...)
	_row, e := _c.QueryRow(ctx)
    if e != nil {
		log.Error(e)
        return false, e
    }

	var {{ .PrimaryKey.Col }} {{.PrimaryKey.Type}}
    e = _row.Scan(&{{.PrimaryKey.Col}})
    switch e {
    case sql.ErrNoRows:
        return false, nil
    case nil:
        return true, nil
    default:
        return false, e
    }
}

{{- if .HasCache}}
// onUpdate
func (p *dao{{$structName}}) onUpdate(ctx context.Context, ids ...{{.PrimaryKey.Type}}) error {
	for _, _id := range ids {
		if e := p.cache.Delete(ctx, GetIdHashKey(_id)); e != nil {
			log.Error(e)
			return e
		}
	}

	return p.cache.PrefixDelete(ctx, "s:")
}

// getCache
func (p *dao{{$structName}}) getCache(ctx context.Context, {{.PrimaryKey.Col}} {{.PrimaryKey.Type}}) (*{{$package}}.{{$structName}}, bool, error) {
	_s,e := p.cache.Fetch(ctx, GetIdHashKey({{.PrimaryKey.Col}}))
	if e != nil {
		log.Error(e)
		return nil, false, e
	}
	if len(_s)==0 {
		return nil, false, nil
	}
	_obj := {{$package}}.New{{$structName}}()
	e = json.Unmarshal(_s, _obj)
	if e != nil {
		log.Error(e)
		return nil, false, e
	}
	return _obj, true,nil
}

// setCache
func (p *dao{{$structName}}) setCache(ctx context.Context, obj *{{$package}}.{{$structName}}) error {
	_s,e := json.Marshal(obj)
	if e != nil {
		log.Error(e)
		return e
	}
	return p.cache.Save(ctx, GetIdHashKey(obj.{{.PrimaryKey.Name}}), string(_s), {{.CacheData}})
}
{{end}}

{{- if ne .RelationX.Name ""}}

//////////////

// Find 按条件读取一个{{.TableName}} slice对象,先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) FindX(ctx context.Context, pageIndex, pageSize uint, cond  []dialect.Condition, sort ...dialect.Order) ([]{{$package}}.{{$structName}}, bool, error) {
	return p.Find4ColsX(ctx, pageIndex, pageSize, []dialect.Field{}, cond, sort...)
}
// Get4ColsX 先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) Get4ColsX(ctx context.Context, cols []dialect.Field, cond  []dialect.Condition, sort ...dialect.Order) (*{{$package}}.{{$structName}}, bool, error) {
	_c := p.R()
	if len(cols) == 0 {
		_c.Cols(tbl{{$structNameLower}}.ReadableFields...)
	} else {
		_c.Cols(cols...)
	}

	_row, e := _c.Where(cond...).
		OrderField(sort...).
		QueryRow(ctx)
	if e != nil {
		log.Error(e)
		return nil, false, e
	}

	obj := {{$package}}.New{{$structName}}()

	e = _row.Scan(obj.AssignPtr(cols...)...)
	switch e {
	case sql.ErrNoRows:
		return nil, false, nil
	case nil:
		rs := p.edges(ctx,[]any{obj.{{.RelationX.Field}}})
		if len(rs) > 0{
{{- if eq .RelationX.Kind "slice"}}
			obj.{{.RelationX.Name}} = rs[obj.{{.RelationX.Field}}]
{{- else if eq .RelationX.Kind "ptr"}}
			tmp := rs[obj.{{.RelationX.Field}}][0]
			obj.{{.RelationX.Name}} = &tmp
{{- else}}
			obj.{{.RelationX.Name}} = rs[obj.{{.RelationX.Field}}][0]
{{- end}}
		}
		return obj, true, nil
	default:
		log.Error(e)
		return nil, false, e
	}
}

// edges
func (p *dao{{$structName}}) edges(ctx context.Context,ids []any) map[any][]{{$package}}.{{.RelationX.Type}} {
	rsMap := make(map[any][]{{$package}}.{{.RelationX.Type}}, len(ids))
	rs, has, _ := {{.RelationX.Type}}(p.db).Find(ctx, 0, 0, tbl{{lower (.RelationX.Type)}}.{{.RelationX.Foreign}}.In(ids...))
	if !has {
		return rsMap
	}
	for _, r := range rs {
		rsMap[r.{{.RelationX.Foreign}}] = append(rsMap[r.{{.RelationX.Foreign}}], r)
	}
	return rsMap
}

// Find4Cols 分页获取{{.TableName}} slice对象，先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) Find4ColsX(ctx context.Context, pageIndex, pageSize uint, cols []dialect.Field, cond  []dialect.Condition, sort ...dialect.Order) ([]{{$package}}.{{$structName}}, bool, error) {
	_c := p.R()
	if len(cols) == 0 {
		_c.Cols(tbl{{$structNameLower}}.ReadableFields...)
	} else {
		_c.Cols(cols...)
	}
	//
	if pageSize == 0 {
		pageSize = dialect.PageSize
	}
	//
	rows, e := _c.Where(cond...).
		OrderField(sort...).
		Limit(pageSize, pageSize*pageIndex).
		Query(ctx)
	if e != nil {
		log.Error(e)
		return nil, false, e
	}
	defer rows.Close()

	obj := {{$package}}.New{{$structName}}()

	_objs, has, e := obj.Scan(rows, cols...)
	if has {
		l := len(_objs)
		idsMap := make(map[any]struct{}, l)
		ids := make([]any, 0, l)
		for i := 0; i < l; i++ {
			if _, ok := idsMap[_objs[i].{{.RelationX.Field}}]; ok {
				continue
			}
			idsMap[_objs[i].{{.RelationX.Field}}] = struct{}{}
			ids = append(ids, _objs[i].{{.RelationX.Field}})
		}
		if len(ids) == 0 {
			return _objs, true, nil
		}
		rs := p.edges(ctx, ids)
		if len(rs) > 0 {
			for i := 0; i < l; i++ {
			{{- if eq .RelationX.Kind "slice"}}
				_objs[i].{{.RelationX.Name}} = rs[_objs[i].{{.RelationX.Field}}]
			{{- else if eq .RelationX.Kind "ptr"}}
				tmp := rs[_objs[i].{{.RelationX.Field}}][0]
				_objs[i].{{.RelationX.Name}} = &tmp
			{{- else}}
				_objs[i].{{.RelationX.Name}} = rs[_objs[i].{{.RelationX.Field}}][0]
			{{- end}}
			}
		}
		return _objs, true, nil
	}
	log.Error(e)
	return nil, false, e
}

// GetByID 按主键读取一个{{.TableName}}对象,先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) GetByIDX(ctx context.Context, id types.BigInt, cols ...dialect.Field) (*{{$package}}.{{$structName}}, bool, error) {
	return p.Get4ColsX(ctx, cols, []dialect.Condition{tbl{{$structNameLower}}.PrimaryKey.Eq(id)})
}

// Get 按条件读取一个{{.TableName}}对象,先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *dao{{$structName}}) GetX(ctx context.Context, cond  []dialect.Condition, sort ...dialect.Order) (*{{$package}}.{{$structName}}, bool, error) {
	return p.Get4ColsX(ctx, []dialect.Field{}, cond, sort...)
}
{{- end}}