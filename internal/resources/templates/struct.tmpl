// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

{{- $tablename := .TableName}}
{{- $structName := .StructName}}
{{- $structNameLower := lower .StructName}}

package {{.PackageName}}

import (
	"sync"
	"database/sql"
	{{- if .HasTime }}
	"time"
	{{- end}}
	"{{.ModulePath}}/define/table/{{ $tablename }}tbl"
	"github.com/linbaozhong/gentity/pkg/ace"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
)

const {{$structName}}TableName = "{{.TableName}}"

var (
	{{lower .StructName}}Map sync.Map
	{{lower .StructName}}Pool = &sync.Pool {
		New: func() any {
			obj := &{{.StructName}}{}
			obj.UUID()
			return obj
		},
	}
)

func init() {
	go func() {
		ticker := time.NewTicker(2 * time.Second)
		defer ticker.Stop()

		for {
			select {
			case <-ace.Context.Done():
				return
			case <-ticker.C:
				now := time.Now().Add(-5*time.Minute)
				{{lower .StructName}}Map.Range(func(key, tm any) bool {
					if t, ok := tm.(time.Time); ok {
						if now.After(t) {
							{{lower .StructName}}Map.Delete(key)
						}
					}
					return true
				})
			}
		}
	}()
}

func New{{.StructName}}() *{{.StructName}} {
	obj := {{lower .StructName}}Pool.Get().(*{{.StructName}})
	{{lower .StructName}}Map.Delete(obj.UUID())
	return obj
}

// Free
func (p *{{.StructName}}) Free() {
	if p == nil {
		return
	}

	uuid := p.UUID()
	if _, ok := {{lower .StructName}}Map.Load(uuid); ok {
		return
	}

	p.reset()

	{{lower .StructName}}Pool.Put(p)
	{{lower .StructName}}Map.Store(uuid, struct{}{})
}

// reset
func (p *{{.StructName}}) reset() {
	{{range $key, $value := .Columns}}p.{{index $value 0}} = {{getTypeValue $value}}
	{{end}}
}


func (p *{{.StructName}}) TableName() string {
	return {{$structName}}TableName
}

func (p *{{.StructName}}) AssignPtr(args ...dialect.Field) ([]any) {
	if len(args) == 0 {
		args = {{ $tablename }}tbl.ReadableFields
	}

    vals := make([]any, 0, len(args))
    for _, col := range args {
        switch col {
        {{- range $key, $value := .Columns}}
        case {{$tablename}}tbl.{{ index $value 0 }}:
            vals = append(vals, &p.{{ index $value 0 }})
        {{- end}}
        }
    }

	return vals
}

func (p *{{.StructName}}) Scan(rows *sql.Rows, args ...dialect.Field) ([]*{{.StructName}}, bool, error) {
	defer rows.Close()
	{{.TableName}}s := make([]*{{.StructName}}, 0)

	if len(args) == 0 {
		args = {{$tablename}}tbl.ReadableFields
	}

	for rows.Next() {
		p := New{{.StructName}}()
		vals := p.AssignPtr(args...)
		err := rows.Scan(vals...)
		if err != nil {
			return nil, false, err
		}
		{{.TableName}}s = append({{.TableName}}s, p)
	}
	if err := rows.Err(); err != nil {
		return nil, false, err
	}
	if len({{.TableName}}s) == 0 {
		return nil, false, sql.ErrNoRows
	}
	return {{.TableName}}s, true, nil
}

func (p *{{.StructName}})AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		lens = len(args)
		cols []string
		vals []any
	)

	if len(args) == 0 {
		args = {{$tablename}}tbl.WritableFields
		lens = len(args)
		cols = make([]string, 0, lens)
		vals = make([]any, 0, lens)
		for _, arg := range args {
			switch arg {
			{{- range $key, $value := .Columns}}
			case {{$tablename}}tbl.{{ index $value 0 }}:
				if p.{{ index $value 0 }}{{getZeroValue $value}} {
					continue
				}
				cols = append(cols, {{$tablename}}tbl.{{ index $value 0 }}.Quote())
				vals = append(vals, p.{{ index $value 0 }})
			{{- end}}
			}
		}
		return cols, vals
	}

	cols = make([]string, 0, lens)
	vals = make([]any, 0, lens)
	for _, arg := range args {
		switch arg {
		{{- range $key, $value := .Columns}}
		case {{$tablename}}tbl.{{ index $value 0 }}:
			cols = append(cols, {{$tablename}}tbl.{{ index $value 0 }}.Quote())
			vals = append(vals, p.{{ index $value 0 }})
		{{- end}}
		}
	}
	return cols, vals
}

//
func (p *{{.StructName}}) AssignKeys() (dialect.Field, any) {
	return {{$tablename}}tbl.PrimaryKey,p.{{index .PrimaryKey 0}}
}


//
func (p *{{.StructName}}) AssignPrimaryKeyValues(result sql.Result) error {
    {{- if eq (index .PrimaryKey 4) "<-" }}
	id, err := result.LastInsertId()
	if err != nil {
        return err
    }
    p.{{index .PrimaryKey 0}} = {{index .PrimaryKey 2}}(id)
    {{- end}}
    return nil
}
