
/*
	--- {{.StructName}} ---
*/
{{- if contains .ParseTag "@checker|@request"}}
// Init
func (p *{{.StructName}}) Init() error {
	{{- range $key, $value := .Columns}}
		{{- if $value.Json.OmitEmpty}}{{else}}
		p.{{$value.Name}} = {{getTypeNil $value}}
		{{- end}}
	{{- end}}

	return nil
}
	{{- if ne .VisitorName ""}}
// Visiter
func (p *{{.StructName}}) Visiter(ctx context.Context) {
	if vis, ok := ctx.Value(api.VisitorKey).(Visitor); ok {
		p.{{.VisitorName}} = vis
	}
	return
}
	{{- end}}
// Check
func (p *{{.StructName}}) Check() error {
{{- range $key, $value := .Columns}}{{range $valid := $value.Valids}}
	{{- $validFunc := getValidFunc $valid $value.Json.Name}}
	{{- $funcObj := getValidParamFunc $valid $value.Json.Name}}
	{{- if eq $valid "required"}}
		if p.{{$value.Name}} == {{getTypeNil $value}} {
			return types.NewError(http.StatusBadRequest, "{{$value.Json.Name}} is required")
		}
	{{- else if ne $validFunc.Func ""}}
		if !validator.{{$validFunc.Func}}({{getFieldString $value}}) {
			return types.NewError(http.StatusBadRequest, "{{$validFunc.Err}}")
		}
	{{- else if ne $funcObj.Func ""}}
		{{- if ne $funcObj.Param ""}}
		if !validator.{{$funcObj.Func}}({{getFieldString $value}}, {{$funcObj.Param}}) {
			return types.NewError(http.StatusBadRequest, "{{$funcObj.Err}}")
		}
		{{- end}}
	{{- end}}
{{- end}}{{end}}
	return nil
}
{{end}}

{{- if contains .ParseTag "@response"}}
// MarshalJSON
func (p *{{.StructName}}) MarshalJSON() ([]byte, error) {
	var _buf = bytes.NewBuffer(nil)
	_buf.WriteByte('{')
	{{- range $key, $value := .Columns}}
		{{- if and (ne $value.Json.Name "") (ne $value.Json.Name "-")}}
			{{- if $value.Json.OmitEmpty}}
			if {{getNotZeroValue $value}} {
				_buf.WriteString(`"{{ $value.Json.Name }}":`+types.Marshal(p.{{$value.Name}})+`,`)
			}
			{{- else}}
			_buf.WriteString(`"{{ $value.Json.Name }}":`+types.Marshal(p.{{$value.Name}})+`,`)
			{{- end}}
		{{- end}}
	{{- end}}
	if l := _buf.Len(); l > 1 {
		_buf.Truncate(l - 1)
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}
{{end}}

{{- if and (contains .ParseTag "@checker|@request") (gt (len .Columns) 0 )}}
	{{- $firstColumn := index .Columns 0 }}
// UnmarshalJSON
func (p *{{.StructName}}) UnmarshalJSON(data []byte) error {
	{{- if ne $firstColumn.Json.Name "-"}}
		{{- if .HasRef}}
		defer func() {
			if r := recover(); r != nil {
				log.Error(r)
				return
			}
		}()
		{{- end}}

		ok := gjson.ValidBytes(data)
		if !ok {
			return errors.New("invalid json")
		}
		_result := gjson.ParseBytes(data)
		var e error
		_result.ForEach(func(key, value gjson.Result) bool {
			switch key.Str {
			{{- range $key, $value := .Columns}}
				{{- if and (ne $value.Json.Name "") (ne $value.Json.Name "-")}}
				case "{{ $value.Json.Name }}":
					{{getUnmarshalJSON $value}}
				{{- end}}
			{{- end}}
			}
			if e != nil {
				log.Error(e)
				return false
			}
			return true
		})
	{{- end}}
	return nil
}

// UnmarshalValues
func (p *{{.StructName}}) UnmarshalValues(m map[string][]string) error {
    {{- if ne $firstColumn.Json.Name "-"}}
		{{- if .HasRef}}
		defer func() {
			if r := recover(); r != nil {
				log.Error(r)
				return
			}
		}()
		{{- end}}

		var e error
		for k, v := range m {
			value := gjson.Result{Type:gjson.String,Raw: v[0],Str: v[0]}
			switch k {
			{{- range $key, $value := .Columns}}
				{{- if and (ne $value.Json.Name "") (ne $value.Json.Name "-")}}
				case "{{ $value.Json.Name }}":
					{{getUnmarshalJSON $value}}
				{{- end}}
			{{- end}}
			}
			if e != nil {
				log.Error(e)
				return e
			}
		}
    {{end}}
	return nil
}
{{end}}