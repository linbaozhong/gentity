package main

import (
	"context"
	"fmt"
	"github.com/linbaozhong/gentity/pkg/api"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/log"
	"os"
	"{{.ModulePath}}/internal/router"
	"{{.ModulePath}}/internal/service"
	"time"
)

var (
	_ = app.Context
)

func main() {
	_port := ":8080"
	// 命令行指定端口
	if len(os.Args) > 1 {
		_port = os.Args[1]
	}
	if _port[0] != ':' {
		_port = ":" + _port
	}

	log.Register(false)
	log.Info(fmt.Sprintf("%s %s %s 服务已开启", "{{.ModulePath}} Api", "0.1", _port))
	// 启动API服务
	_app := router.Init()

	_idleConnsClosed := make(chan struct{})
	api.OnInterrupt(func() {
		_timeout := 5 * time.Second
		_ctx, _cancel := context.WithTimeout(context.Background(), _timeout)
		defer _cancel()
		// close all hosts.
		_app.Shutdown(_ctx)
		closing("{{.ModulePath}} Api", "0.1", _port)
		close(_idleConnsClosed)
	})

	service.Open()

	if e := _app.Listen(_port); e != nil {
		log.Error(e)
	}

	// 优雅地关闭
	<-_idleConnsClosed
}
func closing(name, ver, addr string) {
	app.Close()
	log.Fatal(fmt.Sprintf("%s %s %s 服务已关闭", name, ver, addr))
}
