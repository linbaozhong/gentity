// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblcompanydocument"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const CompanyDocumentTableName = "company_document"

var (
	companydocumentPool = pool.New(app.Context, func() any {
		_obj := &CompanyDocument{}
		return _obj
	})
)

func NewCompanyDocument() *CompanyDocument {
	_obj := companydocumentPool.Get().(*CompanyDocument)
	return _obj
}

// MarshalJSON
func (p *CompanyDocument) MarshalJSON() ([]byte, error) {
	var (
		_buf   = bytes.NewBuffer((make([]byte, 0, 14*50)))
		_comma bool
	)
	_buf.WriteByte('{')

	writeField := func(key string, value string) {
		if _comma {
			_buf.WriteByte(',')
		}
		_buf.WriteByte('"')
		_buf.WriteString(key)
		_buf.WriteString(`":`)
		_buf.WriteString(value)
		_comma = true
	}
	if p.Id != 0 {
		writeField("id", types.Marshal(p.Id))
	}
	if p.Company != 0 {
		writeField("company", types.Marshal(p.Company))
	}
	if p.TemplateId != 0 {
		writeField("template_id", types.Marshal(p.TemplateId))
	}
	if p.Title != "" {
		writeField("title", types.Marshal(p.Title))
	}
	if p.Classify != 0 {
		writeField("classify", types.Marshal(p.Classify))
	}
	if p.Genre != 0 {
		writeField("genre", types.Marshal(p.Genre))
	}
	if p.HandleGenre != 0 {
		writeField("handle_genre", types.Marshal(p.HandleGenre))
	}
	if p.Job != "" {
		writeField("job", types.Marshal(p.Job))
	}
	if p.VariableMode != 0 {
		writeField("variable_mode", types.Marshal(p.VariableMode))
	}
	if p.IsDefault != 0 {
		writeField("is_default", types.Marshal(p.IsDefault))
	}
	if p.CanDefault != 0 {
		writeField("can_default", types.Marshal(p.CanDefault))
	}
	if p.Modifier != 0 {
		writeField("modifier", types.Marshal(p.Modifier))
	}
	if p.State != 0 {
		writeField("state", types.Marshal(p.State))
	}
	if !p.Ctime.IsZero() {
		writeField("ctime", types.Marshal(p.Ctime))
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *CompanyDocument) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "company":
			p.Company = types.BigInt(value.Uint())
		case "template_id":
			p.TemplateId = types.BigInt(value.Uint())
		case "title":
			p.Title = types.String(value.Str)
		case "classify":
			p.Classify = types.Int8(value.Int())
		case "genre":
			p.Genre = types.Int8(value.Int())
		case "handle_genre":
			p.HandleGenre = types.Int8(value.Int())
		case "job":
			p.Job = types.String(value.Str)
		case "variable_mode":
			p.VariableMode = types.Int32(value.Int())
		case "is_default":
			p.IsDefault = types.Int8(value.Int())
		case "can_default":
			p.CanDefault = types.Int8(value.Int())
		case "modifier":
			p.Modifier = types.BigInt(value.Uint())
		case "state":
			p.State = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *CompanyDocument) Free() {
	if p == nil {
		return
	}

	companydocumentPool.Put(p)
}

// Reset
func (p *CompanyDocument) Reset() {
	p.Id = 0
	p.Company = 0
	p.TemplateId = 0
	p.Title = ""
	p.Classify = 0
	p.Genre = 0
	p.HandleGenre = 0
	p.Job = ""
	p.VariableMode = 0
	p.IsDefault = 0
	p.CanDefault = 0
	p.Modifier = 0
	p.State = 0
	p.Ctime = types.Time{}

}

func (p *CompanyDocument) TableName() string {
	return CompanyDocumentTableName
}

// 定义一个映射表，将字段与对应的指针获取函数关联
var companydocumentFieldToPtrFunc = map[dialect.Field]func(*CompanyDocument) any{
	tblcompanydocument.Id:           func(p *CompanyDocument) any { return &p.Id },
	tblcompanydocument.Company:      func(p *CompanyDocument) any { return &p.Company },
	tblcompanydocument.TemplateId:   func(p *CompanyDocument) any { return &p.TemplateId },
	tblcompanydocument.Title:        func(p *CompanyDocument) any { return &p.Title },
	tblcompanydocument.Classify:     func(p *CompanyDocument) any { return &p.Classify },
	tblcompanydocument.Genre:        func(p *CompanyDocument) any { return &p.Genre },
	tblcompanydocument.HandleGenre:  func(p *CompanyDocument) any { return &p.HandleGenre },
	tblcompanydocument.Job:          func(p *CompanyDocument) any { return &p.Job },
	tblcompanydocument.VariableMode: func(p *CompanyDocument) any { return &p.VariableMode },
	tblcompanydocument.IsDefault:    func(p *CompanyDocument) any { return &p.IsDefault },
	tblcompanydocument.CanDefault:   func(p *CompanyDocument) any { return &p.CanDefault },
	tblcompanydocument.Modifier:     func(p *CompanyDocument) any { return &p.Modifier },
	tblcompanydocument.State:        func(p *CompanyDocument) any { return &p.State },
	tblcompanydocument.Ctime:        func(p *CompanyDocument) any { return &p.Ctime },
}

// AssignPtr 根据传入的字段参数，返回对应字段的指针切片。
// 如果未传入任何字段参数，则默认使用 ReadableFields 中的字段。
// 参数 args 为可变参数，代表需要获取指针的字段。
// 返回值为一个包含对应字段指针的切片。
func (p *CompanyDocument) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblcompanydocument.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		if ptrFunc, ok := companydocumentFieldToPtrFunc[col]; ok {
			_vals = append(_vals, ptrFunc(p))
		}
	}

	return _vals
}

func (p *CompanyDocument) Scan(rows *sql.Rows, args ...dialect.Field) ([]*CompanyDocument, bool, error) {
	defer rows.Close()
	company_documents := make([]*CompanyDocument, 0)

	if len(args) == 0 {
		args = tblcompanydocument.ReadableFields
	}

	for rows.Next() {
		_p := NewCompanyDocument()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		company_documents = append(company_documents, _p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return company_documents, len(company_documents) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyDocument) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tblcompanydocument.WritableFields
	}
	return p.AssignValues(args...)
}

// 定义字段到值检查和获取函数的映射
var companydocumentFieldToValueFunc = map[dialect.Field]func(*CompanyDocument) (string, any, bool){
	tblcompanydocument.Id: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.Id.Quote(), p.Id, p.Id == 0
	},
	tblcompanydocument.Company: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.Company.Quote(), p.Company, p.Company == 0
	},
	tblcompanydocument.TemplateId: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.TemplateId.Quote(), p.TemplateId, p.TemplateId == 0
	},
	tblcompanydocument.Title: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.Title.Quote(), p.Title, p.Title == ""
	},
	tblcompanydocument.Classify: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.Classify.Quote(), p.Classify, p.Classify == 0
	},
	tblcompanydocument.Genre: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.Genre.Quote(), p.Genre, p.Genre == 0
	},
	tblcompanydocument.HandleGenre: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.HandleGenre.Quote(), p.HandleGenre, p.HandleGenre == 0
	},
	tblcompanydocument.Job: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.Job.Quote(), p.Job, p.Job == ""
	},
	tblcompanydocument.VariableMode: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.VariableMode.Quote(), p.VariableMode, p.VariableMode == 0
	},
	tblcompanydocument.IsDefault: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.IsDefault.Quote(), p.IsDefault, p.IsDefault == 0
	},
	tblcompanydocument.CanDefault: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.CanDefault.Quote(), p.CanDefault, p.CanDefault == 0
	},
	tblcompanydocument.Modifier: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.Modifier.Quote(), p.Modifier, p.Modifier == 0
	},
	tblcompanydocument.State: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.State.Quote(), p.State, p.State == 0
	},
	tblcompanydocument.Ctime: func(p *CompanyDocument) (string, any, bool) {
		return tblcompanydocument.Ctime.Quote(), p.Ctime, p.Ctime.IsZero()
	},
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyDocument) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)
	if _lens > 0 {
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			if valueFunc, exists := companydocumentFieldToValueFunc[arg]; exists {
				colName, value, _ := valueFunc(p)
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
		return _cols, _vals
	}

	args = tblcompanydocument.WritableFields
	_lens = len(args)
	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		if valueFunc, exists := companydocumentFieldToValueFunc[arg]; exists {
			colName, value, valid := valueFunc(p)
			if !valid {
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
	}
	return _cols, _vals
}

//
func (p *CompanyDocument) AssignKeys() (dialect.Field, any) {
	return tblcompanydocument.PrimaryKey, p.Id
}

//
func (p *CompanyDocument) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
