// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblcompany"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const CompanyTableName = "company"

var (
	companyPool = pool.New(app.Context, func() any {
		_obj := &Company{}
		return _obj
	})
)

func NewCompany() *Company {
	_obj := companyPool.Get().(*Company)
	return _obj
}

// MarshalJSON
func (p *Company) MarshalJSON() ([]byte, error) {
	var (
		_buf   bytes.Buffer
		_comma bool
	)
	_buf.WriteByte('{')
	_buf.Grow(15 * 50)

	writeField := func(key string, value string) {
		if _comma {
			_buf.WriteByte(',')
		}
		_buf.WriteByte('"')
		_buf.WriteString(key)
		_buf.WriteString(`":`)
		_buf.WriteString(value)
		_comma = true
	}
	if p.Id != 0 {
		writeField("id", types.Marshal(p.Id))
	}
	if p.LongName != "" {
		writeField("long_name", types.Marshal(p.LongName))
	}
	if p.ShortName != "" {
		writeField("short_name", types.Marshal(p.ShortName))
	}
	if p.Address != "" {
		writeField("address", types.Marshal(p.Address))
	}
	if p.Email != "" {
		writeField("email", types.Marshal(p.Email))
	}
	if p.ContactName != "" {
		writeField("contact_name", types.Marshal(p.ContactName))
	}
	if p.ContactTelephone != "" {
		writeField("contact_telephone", types.Marshal(p.ContactTelephone))
	}
	if p.ContactMobile != "" {
		writeField("contact_mobile", types.Marshal(p.ContactMobile))
	}
	if p.ContactEmail != "" {
		writeField("contact_email", types.Marshal(p.ContactEmail))
	}
	if p.LegalName != "" {
		writeField("legal_name", types.Marshal(p.LegalName))
	}
	if p.Creator != 0 {
		writeField("creator", types.Marshal(p.Creator))
	}
	if p.State != 0 {
		writeField("state", types.Marshal(p.State))
	}
	if p.Status != 0 {
		writeField("status", types.Marshal(p.Status))
	}
	if !p.Ctime.IsZero() {
		writeField("ctime", types.Marshal(p.Ctime))
	}
	if !p.Utime.IsZero() {
		writeField("utime", types.Marshal(p.Utime))
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *Company) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "long_name":
			p.LongName = types.String(value.Str)
		case "short_name":
			p.ShortName = types.String(value.Str)
		case "address":
			p.Address = types.String(value.Str)
		case "email":
			p.Email = types.String(value.Str)
		case "contact_name":
			p.ContactName = types.String(value.Str)
		case "contact_telephone":
			p.ContactTelephone = types.String(value.Str)
		case "contact_mobile":
			p.ContactMobile = types.String(value.Str)
		case "contact_email":
			p.ContactEmail = types.String(value.Str)
		case "legal_name":
			p.LegalName = types.String(value.Str)
		case "creator":
			p.Creator = types.BigInt(value.Uint())
		case "state":
			p.State = types.Int8(value.Int())
		case "status":
			p.Status = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		case "utime":
			p.Utime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *Company) Free() {
	if p == nil {
		return
	}

	companyPool.Put(p)
}

// Reset
func (p *Company) Reset() {
	p.Id = 0
	p.LongName = ""
	p.ShortName = ""
	p.Address = ""
	p.Email = ""
	p.ContactName = ""
	p.ContactTelephone = ""
	p.ContactMobile = ""
	p.ContactEmail = ""
	p.LegalName = ""
	p.Creator = 0
	p.State = 0
	p.Status = 0
	p.Ctime = types.Time{}
	p.Utime = types.Time{}

}

func (p *Company) TableName() string {
	return CompanyTableName
}

// 定义一个映射表，将字段与对应的指针获取函数关联
var companyFieldToPtrFunc = map[dialect.Field]func(*Company) any{
	tblcompany.Id:               func(p *Company) any { return &p.Id },
	tblcompany.LongName:         func(p *Company) any { return &p.LongName },
	tblcompany.ShortName:        func(p *Company) any { return &p.ShortName },
	tblcompany.Address:          func(p *Company) any { return &p.Address },
	tblcompany.Email:            func(p *Company) any { return &p.Email },
	tblcompany.ContactName:      func(p *Company) any { return &p.ContactName },
	tblcompany.ContactTelephone: func(p *Company) any { return &p.ContactTelephone },
	tblcompany.ContactMobile:    func(p *Company) any { return &p.ContactMobile },
	tblcompany.ContactEmail:     func(p *Company) any { return &p.ContactEmail },
	tblcompany.LegalName:        func(p *Company) any { return &p.LegalName },
	tblcompany.Creator:          func(p *Company) any { return &p.Creator },
	tblcompany.State:            func(p *Company) any { return &p.State },
	tblcompany.Status:           func(p *Company) any { return &p.Status },
	tblcompany.Ctime:            func(p *Company) any { return &p.Ctime },
	tblcompany.Utime:            func(p *Company) any { return &p.Utime },
}

// AssignPtr 根据传入的字段参数，返回对应字段的指针切片。
// 如果未传入任何字段参数，则默认使用 ReadableFields 中的字段。
// 参数 args 为可变参数，代表需要获取指针的字段。
// 返回值为一个包含对应字段指针的切片。
func (p *Company) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblcompany.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		if ptrFunc, ok := companyFieldToPtrFunc[col]; ok {
			_vals = append(_vals, ptrFunc(p))
		}
	}

	return _vals
}

func (p *Company) Scan(rows *sql.Rows, args ...dialect.Field) ([]*Company, bool, error) {
	defer rows.Close()
	companys := make([]*Company, 0)

	if len(args) == 0 {
		args = tblcompany.ReadableFields
	}

	for rows.Next() {
		_p := NewCompany()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		companys = append(companys, _p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return companys, len(companys) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *Company) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tblcompany.WritableFields
	}
	return p.AssignValues(args...)
}

// 定义字段到值检查和获取函数的映射
var companyFieldToValueFunc = map[dialect.Field]func(*Company) (string, any, bool){
	tblcompany.Id: func(p *Company) (string, any, bool) {
		return tblcompany.Id.Quote(), p.Id, p.Id == 0
	},
	tblcompany.LongName: func(p *Company) (string, any, bool) {
		return tblcompany.LongName.Quote(), p.LongName, p.LongName == ""
	},
	tblcompany.ShortName: func(p *Company) (string, any, bool) {
		return tblcompany.ShortName.Quote(), p.ShortName, p.ShortName == ""
	},
	tblcompany.Address: func(p *Company) (string, any, bool) {
		return tblcompany.Address.Quote(), p.Address, p.Address == ""
	},
	tblcompany.Email: func(p *Company) (string, any, bool) {
		return tblcompany.Email.Quote(), p.Email, p.Email == ""
	},
	tblcompany.ContactName: func(p *Company) (string, any, bool) {
		return tblcompany.ContactName.Quote(), p.ContactName, p.ContactName == ""
	},
	tblcompany.ContactTelephone: func(p *Company) (string, any, bool) {
		return tblcompany.ContactTelephone.Quote(), p.ContactTelephone, p.ContactTelephone == ""
	},
	tblcompany.ContactMobile: func(p *Company) (string, any, bool) {
		return tblcompany.ContactMobile.Quote(), p.ContactMobile, p.ContactMobile == ""
	},
	tblcompany.ContactEmail: func(p *Company) (string, any, bool) {
		return tblcompany.ContactEmail.Quote(), p.ContactEmail, p.ContactEmail == ""
	},
	tblcompany.LegalName: func(p *Company) (string, any, bool) {
		return tblcompany.LegalName.Quote(), p.LegalName, p.LegalName == ""
	},
	tblcompany.Creator: func(p *Company) (string, any, bool) {
		return tblcompany.Creator.Quote(), p.Creator, p.Creator == 0
	},
	tblcompany.State: func(p *Company) (string, any, bool) {
		return tblcompany.State.Quote(), p.State, p.State == 0
	},
	tblcompany.Status: func(p *Company) (string, any, bool) {
		return tblcompany.Status.Quote(), p.Status, p.Status == 0
	},
	tblcompany.Ctime: func(p *Company) (string, any, bool) {
		return tblcompany.Ctime.Quote(), p.Ctime, p.Ctime.IsZero()
	},
	tblcompany.Utime: func(p *Company) (string, any, bool) {
		return tblcompany.Utime.Quote(), p.Utime, p.Utime.IsZero()
	},
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *Company) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)
	if _lens > 0 {
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			if valueFunc, exists := companyFieldToValueFunc[arg]; exists {
				colName, value, _ := valueFunc(p)
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
		return _cols, _vals
	}

	args = tblcompany.WritableFields
	_lens = len(args)
	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		if valueFunc, exists := companyFieldToValueFunc[arg]; exists {
			colName, value, valid := valueFunc(p)
			if !valid {
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
	}
	return _cols, _vals
}

//
func (p *Company) AssignKeys() (dialect.Field, any) {
	return tblcompany.PrimaryKey, p.Id
}

//
func (p *Company) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
