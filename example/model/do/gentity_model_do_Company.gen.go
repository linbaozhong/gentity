// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblcompany"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const CompanyTableName = "company"

var (
	companyPool = pool.New(app.Context, func() any {
		_obj := &Company{}
		return _obj
	})
)

func NewCompany() *Company {
	_obj := companyPool.Get().(*Company)
	return _obj
}

// MarshalJSON
func (p *Company) MarshalJSON() ([]byte, error) {
	var _buf = bytes.NewBuffer(nil)
	_buf.WriteByte('{')
	if p.Id != 0 {
		_buf.WriteString(`"id":` + types.Marshal(p.Id) + `,`)
	}
	if p.LongName != "" {
		_buf.WriteString(`"long_name":` + types.Marshal(p.LongName) + `,`)
	}
	if p.ShortName != "" {
		_buf.WriteString(`"short_name":` + types.Marshal(p.ShortName) + `,`)
	}
	if p.Address != "" {
		_buf.WriteString(`"address":` + types.Marshal(p.Address) + `,`)
	}
	if p.Email != "" {
		_buf.WriteString(`"email":` + types.Marshal(p.Email) + `,`)
	}
	if p.ContactName != "" {
		_buf.WriteString(`"contact_name":` + types.Marshal(p.ContactName) + `,`)
	}
	if p.ContactTelephone != "" {
		_buf.WriteString(`"contact_telephone":` + types.Marshal(p.ContactTelephone) + `,`)
	}
	if p.ContactMobile != "" {
		_buf.WriteString(`"contact_mobile":` + types.Marshal(p.ContactMobile) + `,`)
	}
	if p.ContactEmail != "" {
		_buf.WriteString(`"contact_email":` + types.Marshal(p.ContactEmail) + `,`)
	}
	if p.LegalName != "" {
		_buf.WriteString(`"legal_name":` + types.Marshal(p.LegalName) + `,`)
	}
	if p.Creator != 0 {
		_buf.WriteString(`"creator":` + types.Marshal(p.Creator) + `,`)
	}
	if p.State != 0 {
		_buf.WriteString(`"state":` + types.Marshal(p.State) + `,`)
	}
	if p.Status != 0 {
		_buf.WriteString(`"status":` + types.Marshal(p.Status) + `,`)
	}
	if !p.Ctime.IsZero() {
		_buf.WriteString(`"ctime":` + types.Marshal(p.Ctime) + `,`)
	}
	if !p.Utime.IsZero() {
		_buf.WriteString(`"utime":` + types.Marshal(p.Utime) + `,`)
	}
	if l := _buf.Len(); l > 1 {
		_buf.Truncate(l - 1)
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *Company) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "long_name":
			p.LongName = types.String(value.Str)
		case "short_name":
			p.ShortName = types.String(value.Str)
		case "address":
			p.Address = types.String(value.Str)
		case "email":
			p.Email = types.String(value.Str)
		case "contact_name":
			p.ContactName = types.String(value.Str)
		case "contact_telephone":
			p.ContactTelephone = types.String(value.Str)
		case "contact_mobile":
			p.ContactMobile = types.String(value.Str)
		case "contact_email":
			p.ContactEmail = types.String(value.Str)
		case "legal_name":
			p.LegalName = types.String(value.Str)
		case "creator":
			p.Creator = types.BigInt(value.Uint())
		case "state":
			p.State = types.Int8(value.Int())
		case "status":
			p.Status = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		case "utime":
			p.Utime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *Company) Free() {
	if p == nil {
		return
	}

	companyPool.Put(p)
}

// Reset
func (p *Company) Reset() {
	p.Id = 0
	p.LongName = ""
	p.ShortName = ""
	p.Address = ""
	p.Email = ""
	p.ContactName = ""
	p.ContactTelephone = ""
	p.ContactMobile = ""
	p.ContactEmail = ""
	p.LegalName = ""
	p.Creator = 0
	p.State = 0
	p.Status = 0
	p.Ctime = types.Time{}
	p.Utime = types.Time{}

}

func (p *Company) TableName() string {
	return CompanyTableName
}

func (p *Company) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblcompany.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		switch col {
		case tblcompany.Id:
			_vals = append(_vals, &p.Id)
		case tblcompany.LongName:
			_vals = append(_vals, &p.LongName)
		case tblcompany.ShortName:
			_vals = append(_vals, &p.ShortName)
		case tblcompany.Address:
			_vals = append(_vals, &p.Address)
		case tblcompany.Email:
			_vals = append(_vals, &p.Email)
		case tblcompany.ContactName:
			_vals = append(_vals, &p.ContactName)
		case tblcompany.ContactTelephone:
			_vals = append(_vals, &p.ContactTelephone)
		case tblcompany.ContactMobile:
			_vals = append(_vals, &p.ContactMobile)
		case tblcompany.ContactEmail:
			_vals = append(_vals, &p.ContactEmail)
		case tblcompany.LegalName:
			_vals = append(_vals, &p.LegalName)
		case tblcompany.Creator:
			_vals = append(_vals, &p.Creator)
		case tblcompany.State:
			_vals = append(_vals, &p.State)
		case tblcompany.Status:
			_vals = append(_vals, &p.Status)
		case tblcompany.Ctime:
			_vals = append(_vals, &p.Ctime)
		case tblcompany.Utime:
			_vals = append(_vals, &p.Utime)
		}
	}

	return _vals
}

func (p *Company) Scan(rows *sql.Rows, args ...dialect.Field) ([]*Company, bool, error) {
	defer rows.Close()
	companys := make([]*Company, 0)

	if len(args) == 0 {
		args = tblcompany.ReadableFields
	}

	for rows.Next() {
		_p := NewCompany()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		companys = append(companys, _p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return companys, len(companys) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *Company) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tblcompany.WritableFields
	}
	return p.AssignValues(args...)
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *Company) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)

	if len(args) == 0 {
		args = tblcompany.WritableFields
		_lens = len(args)
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			switch arg {
			case tblcompany.Id:
				if p.Id == 0 {
					continue
				}
				_cols = append(_cols, tblcompany.Id.Quote())
				_vals = append(_vals, p.Id)
			case tblcompany.LongName:
				if p.LongName == "" {
					continue
				}
				_cols = append(_cols, tblcompany.LongName.Quote())
				_vals = append(_vals, p.LongName)
			case tblcompany.ShortName:
				if p.ShortName == "" {
					continue
				}
				_cols = append(_cols, tblcompany.ShortName.Quote())
				_vals = append(_vals, p.ShortName)
			case tblcompany.Address:
				if p.Address == "" {
					continue
				}
				_cols = append(_cols, tblcompany.Address.Quote())
				_vals = append(_vals, p.Address)
			case tblcompany.Email:
				if p.Email == "" {
					continue
				}
				_cols = append(_cols, tblcompany.Email.Quote())
				_vals = append(_vals, p.Email)
			case tblcompany.ContactName:
				if p.ContactName == "" {
					continue
				}
				_cols = append(_cols, tblcompany.ContactName.Quote())
				_vals = append(_vals, p.ContactName)
			case tblcompany.ContactTelephone:
				if p.ContactTelephone == "" {
					continue
				}
				_cols = append(_cols, tblcompany.ContactTelephone.Quote())
				_vals = append(_vals, p.ContactTelephone)
			case tblcompany.ContactMobile:
				if p.ContactMobile == "" {
					continue
				}
				_cols = append(_cols, tblcompany.ContactMobile.Quote())
				_vals = append(_vals, p.ContactMobile)
			case tblcompany.ContactEmail:
				if p.ContactEmail == "" {
					continue
				}
				_cols = append(_cols, tblcompany.ContactEmail.Quote())
				_vals = append(_vals, p.ContactEmail)
			case tblcompany.LegalName:
				if p.LegalName == "" {
					continue
				}
				_cols = append(_cols, tblcompany.LegalName.Quote())
				_vals = append(_vals, p.LegalName)
			case tblcompany.Creator:
				if p.Creator == 0 {
					continue
				}
				_cols = append(_cols, tblcompany.Creator.Quote())
				_vals = append(_vals, p.Creator)
			case tblcompany.State:
				if p.State == 0 {
					continue
				}
				_cols = append(_cols, tblcompany.State.Quote())
				_vals = append(_vals, p.State)
			case tblcompany.Status:
				if p.Status == 0 {
					continue
				}
				_cols = append(_cols, tblcompany.Status.Quote())
				_vals = append(_vals, p.Status)
			case tblcompany.Ctime:
				if p.Ctime.IsZero() {
					continue
				}
				_cols = append(_cols, tblcompany.Ctime.Quote())
				_vals = append(_vals, p.Ctime)
			case tblcompany.Utime:
				if p.Utime.IsZero() {
					continue
				}
				_cols = append(_cols, tblcompany.Utime.Quote())
				_vals = append(_vals, p.Utime)
			}
		}
		return _cols, _vals
	}

	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		switch arg {
		case tblcompany.Id:
			_cols = append(_cols, tblcompany.Id.Quote())
			_vals = append(_vals, p.Id)
		case tblcompany.LongName:
			_cols = append(_cols, tblcompany.LongName.Quote())
			_vals = append(_vals, p.LongName)
		case tblcompany.ShortName:
			_cols = append(_cols, tblcompany.ShortName.Quote())
			_vals = append(_vals, p.ShortName)
		case tblcompany.Address:
			_cols = append(_cols, tblcompany.Address.Quote())
			_vals = append(_vals, p.Address)
		case tblcompany.Email:
			_cols = append(_cols, tblcompany.Email.Quote())
			_vals = append(_vals, p.Email)
		case tblcompany.ContactName:
			_cols = append(_cols, tblcompany.ContactName.Quote())
			_vals = append(_vals, p.ContactName)
		case tblcompany.ContactTelephone:
			_cols = append(_cols, tblcompany.ContactTelephone.Quote())
			_vals = append(_vals, p.ContactTelephone)
		case tblcompany.ContactMobile:
			_cols = append(_cols, tblcompany.ContactMobile.Quote())
			_vals = append(_vals, p.ContactMobile)
		case tblcompany.ContactEmail:
			_cols = append(_cols, tblcompany.ContactEmail.Quote())
			_vals = append(_vals, p.ContactEmail)
		case tblcompany.LegalName:
			_cols = append(_cols, tblcompany.LegalName.Quote())
			_vals = append(_vals, p.LegalName)
		case tblcompany.Creator:
			_cols = append(_cols, tblcompany.Creator.Quote())
			_vals = append(_vals, p.Creator)
		case tblcompany.State:
			_cols = append(_cols, tblcompany.State.Quote())
			_vals = append(_vals, p.State)
		case tblcompany.Status:
			_cols = append(_cols, tblcompany.Status.Quote())
			_vals = append(_vals, p.Status)
		case tblcompany.Ctime:
			_cols = append(_cols, tblcompany.Ctime.Quote())
			_vals = append(_vals, p.Ctime)
		case tblcompany.Utime:
			_cols = append(_cols, tblcompany.Utime.Quote())
			_vals = append(_vals, p.Utime)
		}
	}
	return _cols, _vals
}

func (p *Company) AssignKeys() (dialect.Field, any) {
	return tblcompany.PrimaryKey, p.Id
}

func (p *Company) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
