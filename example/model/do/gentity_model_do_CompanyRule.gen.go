// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblcompanyrule"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const CompanyRuleTableName = "company_rule"

var (
	companyrulePool = pool.New(app.Context, func() any {
		_obj := &CompanyRule{}
		return _obj
	})
)

func NewCompanyRule() *CompanyRule {
	_obj := companyrulePool.Get().(*CompanyRule)
	return _obj
}

// MarshalJSON
func (p *CompanyRule) MarshalJSON() ([]byte, error) {
	var (
		_buf   bytes.Buffer
		_comma bool
	)
	_buf.WriteByte('{')
	_buf.Grow(9 * 50)

	writeField := func(key string, value string) {
		if _comma {
			_buf.WriteByte(',')
		}
		_buf.WriteByte('"')
		_buf.WriteString(key)
		_buf.WriteString(`":`)
		_buf.WriteString(value)
		_comma = true
	}
	if p.Id != 0 {
		writeField("id", types.Marshal(p.Id))
	}
	if p.Pid != 0 {
		writeField("pid", types.Marshal(p.Pid))
	}
	if p.Path != "" {
		writeField("path", types.Marshal(p.Path))
	}
	if p.Title != "" {
		writeField("title", types.Marshal(p.Title))
	}
	if p.Type != 0 {
		writeField("type", types.Marshal(p.Type))
	}
	if p.IsPrivate != 0 {
		writeField("is_private", types.Marshal(p.IsPrivate))
	}
	if p.State != 0 {
		writeField("state", types.Marshal(p.State))
	}
	if p.Descr != "" {
		writeField("descr", types.Marshal(p.Descr))
	}
	if p.Belong != 0 {
		writeField("belong", types.Marshal(p.Belong))
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *CompanyRule) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "pid":
			p.Pid = types.BigInt(value.Uint())
		case "path":
			p.Path = types.String(value.Str)
		case "title":
			p.Title = types.String(value.Str)
		case "type":
			p.Type = types.Uint8(value.Uint())
		case "is_private":
			p.IsPrivate = types.Uint8(value.Uint())
		case "state":
			p.State = types.Int8(value.Int())
		case "descr":
			p.Descr = types.String(value.Str)
		case "belong":
			p.Belong = types.Int8(value.Int())
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *CompanyRule) Free() {
	if p == nil {
		return
	}

	companyrulePool.Put(p)
}

// Reset
func (p *CompanyRule) Reset() {
	p.Id = 0
	p.Pid = 0
	p.Path = ""
	p.Title = ""
	p.Type = 0
	p.IsPrivate = 0
	p.State = 0
	p.Descr = ""
	p.Belong = 0

}

func (p *CompanyRule) TableName() string {
	return CompanyRuleTableName
}

// 定义一个映射表，将字段与对应的指针获取函数关联
var companyruleFieldToPtrFunc = map[dialect.Field]func(*CompanyRule) any{
	tblcompanyrule.Id:        func(p *CompanyRule) any { return &p.Id },
	tblcompanyrule.Pid:       func(p *CompanyRule) any { return &p.Pid },
	tblcompanyrule.Path:      func(p *CompanyRule) any { return &p.Path },
	tblcompanyrule.Title:     func(p *CompanyRule) any { return &p.Title },
	tblcompanyrule.Type:      func(p *CompanyRule) any { return &p.Type },
	tblcompanyrule.IsPrivate: func(p *CompanyRule) any { return &p.IsPrivate },
	tblcompanyrule.State:     func(p *CompanyRule) any { return &p.State },
	tblcompanyrule.Descr:     func(p *CompanyRule) any { return &p.Descr },
	tblcompanyrule.Belong:    func(p *CompanyRule) any { return &p.Belong },
}

// AssignPtr 根据传入的字段参数，返回对应字段的指针切片。
// 如果未传入任何字段参数，则默认使用 ReadableFields 中的字段。
// 参数 args 为可变参数，代表需要获取指针的字段。
// 返回值为一个包含对应字段指针的切片。
func (p *CompanyRule) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblcompanyrule.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		if ptrFunc, ok := companyruleFieldToPtrFunc[col]; ok {
			_vals = append(_vals, ptrFunc(p))
		}
	}

	return _vals
}

func (p *CompanyRule) Scan(rows *sql.Rows, args ...dialect.Field) ([]*CompanyRule, bool, error) {
	defer rows.Close()
	company_rules := make([]*CompanyRule, 0)

	if len(args) == 0 {
		args = tblcompanyrule.ReadableFields
	}

	for rows.Next() {
		_p := NewCompanyRule()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		company_rules = append(company_rules, _p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return company_rules, len(company_rules) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyRule) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tblcompanyrule.WritableFields
	}
	return p.AssignValues(args...)
}

// 定义字段到值检查和获取函数的映射
var companyruleFieldToValueFunc = map[dialect.Field]func(*CompanyRule) (string, any, bool){
	tblcompanyrule.Id: func(p *CompanyRule) (string, any, bool) {
		return tblcompanyrule.Id.Quote(), p.Id, p.Id == 0
	},
	tblcompanyrule.Pid: func(p *CompanyRule) (string, any, bool) {
		return tblcompanyrule.Pid.Quote(), p.Pid, p.Pid == 0
	},
	tblcompanyrule.Path: func(p *CompanyRule) (string, any, bool) {
		return tblcompanyrule.Path.Quote(), p.Path, p.Path == ""
	},
	tblcompanyrule.Title: func(p *CompanyRule) (string, any, bool) {
		return tblcompanyrule.Title.Quote(), p.Title, p.Title == ""
	},
	tblcompanyrule.Type: func(p *CompanyRule) (string, any, bool) {
		return tblcompanyrule.Type.Quote(), p.Type, p.Type == 0
	},
	tblcompanyrule.IsPrivate: func(p *CompanyRule) (string, any, bool) {
		return tblcompanyrule.IsPrivate.Quote(), p.IsPrivate, p.IsPrivate == 0
	},
	tblcompanyrule.State: func(p *CompanyRule) (string, any, bool) {
		return tblcompanyrule.State.Quote(), p.State, p.State == 0
	},
	tblcompanyrule.Descr: func(p *CompanyRule) (string, any, bool) {
		return tblcompanyrule.Descr.Quote(), p.Descr, p.Descr == ""
	},
	tblcompanyrule.Belong: func(p *CompanyRule) (string, any, bool) {
		return tblcompanyrule.Belong.Quote(), p.Belong, p.Belong == 0
	},
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyRule) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)
	if _lens > 0 {
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			if valueFunc, exists := companyruleFieldToValueFunc[arg]; exists {
				colName, value, _ := valueFunc(p)
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
		return _cols, _vals
	}

	args = tblcompanyrule.WritableFields
	_lens = len(args)
	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		if valueFunc, exists := companyruleFieldToValueFunc[arg]; exists {
			colName, value, valid := valueFunc(p)
			if !valid {
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
	}
	return _cols, _vals
}

//
func (p *CompanyRule) AssignKeys() (dialect.Field, any) {
	return tblcompanyrule.PrimaryKey, p.Id
}

//
func (p *CompanyRule) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
