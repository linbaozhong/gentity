// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblcompanyman"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const CompanyManTableName = "company_man"

var (
	companymanPool = pool.New(app.Context, func() any {
		_obj := &CompanyMan{}
		return _obj
	})
)

func NewCompanyMan() *CompanyMan {
	_obj := companymanPool.Get().(*CompanyMan)
	return _obj
}

// MarshalJSON
func (p *CompanyMan) MarshalJSON() ([]byte, error) {
	var (
		_buf   bytes.Buffer
		_comma bool
	)
	_buf.WriteByte('{')
	_buf.Grow(13 * 50)

	writeField := func(key string, value string) {
		if _comma {
			_buf.WriteByte(',')
		}
		_buf.WriteByte('"')
		_buf.WriteString(key)
		_buf.WriteString(`":`)
		_buf.WriteString(value)
		_comma = true
	}
	if p.Id != 0 {
		writeField("id", types.Marshal(p.Id))
	}
	if p.AccountId != 0 {
		writeField("account_id", types.Marshal(p.AccountId))
	}
	if p.Company != 0 {
		writeField("company", types.Marshal(p.Company))
	}
	if p.RealName != "" {
		writeField("real_name", types.Marshal(p.RealName))
	}
	if p.Email != "" {
		writeField("email", types.Marshal(p.Email))
	}
	if p.Roles != "" {
		writeField("roles", types.Marshal(p.Roles))
	}
	if p.Gender != "" {
		writeField("gender", types.Marshal(p.Gender))
	}
	if p.Genre != 0 {
		writeField("genre", types.Marshal(p.Genre))
	}
	if p.IsActivate != 0 {
		writeField("is_activate", types.Marshal(p.IsActivate))
	}
	if !p.LoginTime.IsZero() {
		writeField("login_time", types.Marshal(p.LoginTime))
	}
	if p.State != 0 {
		writeField("state", types.Marshal(p.State))
	}
	if !p.Ctime.IsZero() {
		writeField("ctime", types.Marshal(p.Ctime))
	}
	if !p.Utime.IsZero() {
		writeField("utime", types.Marshal(p.Utime))
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *CompanyMan) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "account_id":
			p.AccountId = types.BigInt(value.Uint())
		case "company":
			p.Company = types.BigInt(value.Uint())
		case "real_name":
			p.RealName = types.String(value.Str)
		case "email":
			p.Email = types.String(value.Str)
		case "roles":
			p.Roles = types.String(value.Str)
		case "gender":
			p.Gender = types.String(value.Str)
		case "genre":
			p.Genre = types.Int8(value.Int())
		case "is_activate":
			p.IsActivate = types.Int8(value.Int())
		case "login_time":
			p.LoginTime = types.Time{Time: value.Time()}
		case "state":
			p.State = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		case "utime":
			p.Utime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *CompanyMan) Free() {
	if p == nil {
		return
	}

	companymanPool.Put(p)
}

// Reset
func (p *CompanyMan) Reset() {
	p.Id = 0
	p.AccountId = 0
	p.Company = 0
	p.RealName = ""
	p.Email = ""
	p.Roles = ""
	p.Gender = ""
	p.Genre = 0
	p.IsActivate = 0
	p.LoginTime = types.Time{}
	p.State = 0
	p.Ctime = types.Time{}
	p.Utime = types.Time{}

}

func (p *CompanyMan) TableName() string {
	return CompanyManTableName
}

// 定义一个映射表，将字段与对应的指针获取函数关联
var companymanFieldToPtrFunc = map[dialect.Field]func(*CompanyMan) any{
	tblcompanyman.Id:         func(p *CompanyMan) any { return &p.Id },
	tblcompanyman.AccountId:  func(p *CompanyMan) any { return &p.AccountId },
	tblcompanyman.Company:    func(p *CompanyMan) any { return &p.Company },
	tblcompanyman.RealName:   func(p *CompanyMan) any { return &p.RealName },
	tblcompanyman.Email:      func(p *CompanyMan) any { return &p.Email },
	tblcompanyman.Roles:      func(p *CompanyMan) any { return &p.Roles },
	tblcompanyman.Gender:     func(p *CompanyMan) any { return &p.Gender },
	tblcompanyman.Genre:      func(p *CompanyMan) any { return &p.Genre },
	tblcompanyman.IsActivate: func(p *CompanyMan) any { return &p.IsActivate },
	tblcompanyman.LoginTime:  func(p *CompanyMan) any { return &p.LoginTime },
	tblcompanyman.State:      func(p *CompanyMan) any { return &p.State },
	tblcompanyman.Ctime:      func(p *CompanyMan) any { return &p.Ctime },
	tblcompanyman.Utime:      func(p *CompanyMan) any { return &p.Utime },
}

// AssignPtr 根据传入的字段参数，返回对应字段的指针切片。
// 如果未传入任何字段参数，则默认使用 ReadableFields 中的字段。
// 参数 args 为可变参数，代表需要获取指针的字段。
// 返回值为一个包含对应字段指针的切片。
func (p *CompanyMan) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblcompanyman.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		if ptrFunc, ok := companymanFieldToPtrFunc[col]; ok {
			_vals = append(_vals, ptrFunc(p))
		}
	}

	return _vals
}

func (p *CompanyMan) Scan(rows *sql.Rows, args ...dialect.Field) ([]*CompanyMan, bool, error) {
	defer rows.Close()
	company_mans := make([]*CompanyMan, 0)

	if len(args) == 0 {
		args = tblcompanyman.ReadableFields
	}

	for rows.Next() {
		_p := NewCompanyMan()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		company_mans = append(company_mans, _p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return company_mans, len(company_mans) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyMan) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tblcompanyman.WritableFields
	}
	return p.AssignValues(args...)
}

// 定义字段到值检查和获取函数的映射
var companymanFieldToValueFunc = map[dialect.Field]func(*CompanyMan) (string, any, bool){
	tblcompanyman.Id: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.Id.Quote(), p.Id, p.Id == 0
	},
	tblcompanyman.AccountId: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.AccountId.Quote(), p.AccountId, p.AccountId == 0
	},
	tblcompanyman.Company: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.Company.Quote(), p.Company, p.Company == 0
	},
	tblcompanyman.RealName: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.RealName.Quote(), p.RealName, p.RealName == ""
	},
	tblcompanyman.Email: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.Email.Quote(), p.Email, p.Email == ""
	},
	tblcompanyman.Roles: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.Roles.Quote(), p.Roles, p.Roles == ""
	},
	tblcompanyman.Gender: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.Gender.Quote(), p.Gender, p.Gender == ""
	},
	tblcompanyman.Genre: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.Genre.Quote(), p.Genre, p.Genre == 0
	},
	tblcompanyman.IsActivate: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.IsActivate.Quote(), p.IsActivate, p.IsActivate == 0
	},
	tblcompanyman.LoginTime: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.LoginTime.Quote(), p.LoginTime, p.LoginTime.IsZero()
	},
	tblcompanyman.State: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.State.Quote(), p.State, p.State == 0
	},
	tblcompanyman.Ctime: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.Ctime.Quote(), p.Ctime, p.Ctime.IsZero()
	},
	tblcompanyman.Utime: func(p *CompanyMan) (string, any, bool) {
		return tblcompanyman.Utime.Quote(), p.Utime, p.Utime.IsZero()
	},
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyMan) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)
	if _lens > 0 {
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			if valueFunc, exists := companymanFieldToValueFunc[arg]; exists {
				colName, value, _ := valueFunc(p)
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
		return _cols, _vals
	}

	args = tblcompanyman.WritableFields
	_lens = len(args)
	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		if valueFunc, exists := companymanFieldToValueFunc[arg]; exists {
			colName, value, valid := valueFunc(p)
			if !valid {
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
	}
	return _cols, _vals
}

//
func (p *CompanyMan) AssignKeys() (dialect.Field, any) {
	return tblcompanyman.PrimaryKey, p.Id
}

//
func (p *CompanyMan) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
