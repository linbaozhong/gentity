// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
	"model/define/table/tblcompanyman"
)

const CompanyManTableName = "company_man"

var (
	companymanPool = pool.New(app.Context, func() any {
		_obj := &CompanyMan{}
		return _obj
	})
)

func NewCompanyMan() *CompanyMan {
	_obj := companymanPool.Get().(*CompanyMan)
	return _obj
}

// MarshalJSON
func (p *CompanyMan) MarshalJSON() ([]byte, error) {
	var _buf = bytes.NewBuffer(nil)
	_buf.WriteByte('{')
	if p.Id != 0 {
		_buf.WriteString(`"id":` + types.Marshal(p.Id) + `,`)
	}
	if p.AccountId != 0 {
		_buf.WriteString(`"account_id":` + types.Marshal(p.AccountId) + `,`)
	}
	if p.Company != 0 {
		_buf.WriteString(`"company":` + types.Marshal(p.Company) + `,`)
	}
	if p.RealName != "" {
		_buf.WriteString(`"real_name":` + types.Marshal(p.RealName) + `,`)
	}
	if p.Email != "" {
		_buf.WriteString(`"email":` + types.Marshal(p.Email) + `,`)
	}
	if p.Roles != "" {
		_buf.WriteString(`"roles":` + types.Marshal(p.Roles) + `,`)
	}
	if p.Gender != "" {
		_buf.WriteString(`"gender":` + types.Marshal(p.Gender) + `,`)
	}
	if p.Genre != 0 {
		_buf.WriteString(`"genre":` + types.Marshal(p.Genre) + `,`)
	}
	if p.IsActivate != 0 {
		_buf.WriteString(`"is_activate":` + types.Marshal(p.IsActivate) + `,`)
	}
	if !p.LoginTime.IsZero() {
		_buf.WriteString(`"login_time":` + types.Marshal(p.LoginTime) + `,`)
	}
	if p.State != 0 {
		_buf.WriteString(`"state":` + types.Marshal(p.State) + `,`)
	}
	if !p.Ctime.IsZero() {
		_buf.WriteString(`"ctime":` + types.Marshal(p.Ctime) + `,`)
	}
	if !p.Utime.IsZero() {
		_buf.WriteString(`"utime":` + types.Marshal(p.Utime) + `,`)
	}
	if l := _buf.Len(); l > 1 {
		_buf.Truncate(l - 1)
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *CompanyMan) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "account_id":
			p.AccountId = types.BigInt(value.Uint())
		case "company":
			p.Company = types.BigInt(value.Uint())
		case "real_name":
			p.RealName = types.String(value.Str)
		case "email":
			p.Email = types.String(value.Str)
		case "roles":
			p.Roles = types.String(value.Str)
		case "gender":
			p.Gender = types.String(value.Str)
		case "genre":
			p.Genre = types.Int8(value.Int())
		case "is_activate":
			p.IsActivate = types.Int8(value.Int())
		case "login_time":
			p.LoginTime = types.Time{Time: value.Time()}
		case "state":
			p.State = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		case "utime":
			p.Utime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *CompanyMan) Free() {
	if p == nil {
		return
	}

	companymanPool.Put(p)
}

// Reset
func (p *CompanyMan) Reset() {
	p.Id = 0
	p.AccountId = 0
	p.Company = 0
	p.RealName = ""
	p.Email = ""
	p.Roles = ""
	p.Gender = ""
	p.Genre = 0
	p.IsActivate = 0
	p.LoginTime = types.Time{}
	p.State = 0
	p.Ctime = types.Time{}
	p.Utime = types.Time{}

}

func (p *CompanyMan) TableName() string {
	return CompanyManTableName
}

func (p *CompanyMan) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblcompanyman.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		switch col {
		case tblcompanyman.Id:
			_vals = append(_vals, &p.Id)
		case tblcompanyman.AccountId:
			_vals = append(_vals, &p.AccountId)
		case tblcompanyman.Company:
			_vals = append(_vals, &p.Company)
		case tblcompanyman.RealName:
			_vals = append(_vals, &p.RealName)
		case tblcompanyman.Email:
			_vals = append(_vals, &p.Email)
		case tblcompanyman.Roles:
			_vals = append(_vals, &p.Roles)
		case tblcompanyman.Gender:
			_vals = append(_vals, &p.Gender)
		case tblcompanyman.Genre:
			_vals = append(_vals, &p.Genre)
		case tblcompanyman.IsActivate:
			_vals = append(_vals, &p.IsActivate)
		case tblcompanyman.LoginTime:
			_vals = append(_vals, &p.LoginTime)
		case tblcompanyman.State:
			_vals = append(_vals, &p.State)
		case tblcompanyman.Ctime:
			_vals = append(_vals, &p.Ctime)
		case tblcompanyman.Utime:
			_vals = append(_vals, &p.Utime)
		}
	}

	return _vals
}

func (p *CompanyMan) Scan(rows *sql.Rows, args ...dialect.Field) ([]*CompanyMan, bool, error) {
	defer rows.Close()
	company_mans := make([]*CompanyMan, 0)

	if len(args) == 0 {
		args = tblcompanyman.ReadableFields
	}

	for rows.Next() {
		_p := NewCompanyMan()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		company_mans = append(company_mans, _p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return company_mans, len(company_mans) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyMan) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tblcompanyman.WritableFields
	}
	return p.AssignValues(args...)
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyMan) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)

	if len(args) == 0 {
		args = tblcompanyman.WritableFields
		_lens = len(args)
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			switch arg {
			case tblcompanyman.Id:
				if p.Id == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyman.Id.Quote())
				_vals = append(_vals, p.Id)
			case tblcompanyman.AccountId:
				if p.AccountId == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyman.AccountId.Quote())
				_vals = append(_vals, p.AccountId)
			case tblcompanyman.Company:
				if p.Company == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyman.Company.Quote())
				_vals = append(_vals, p.Company)
			case tblcompanyman.RealName:
				if p.RealName == "" {
					continue
				}
				_cols = append(_cols, tblcompanyman.RealName.Quote())
				_vals = append(_vals, p.RealName)
			case tblcompanyman.Email:
				if p.Email == "" {
					continue
				}
				_cols = append(_cols, tblcompanyman.Email.Quote())
				_vals = append(_vals, p.Email)
			case tblcompanyman.Roles:
				if p.Roles == "" {
					continue
				}
				_cols = append(_cols, tblcompanyman.Roles.Quote())
				_vals = append(_vals, p.Roles)
			case tblcompanyman.Gender:
				if p.Gender == "" {
					continue
				}
				_cols = append(_cols, tblcompanyman.Gender.Quote())
				_vals = append(_vals, p.Gender)
			case tblcompanyman.Genre:
				if p.Genre == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyman.Genre.Quote())
				_vals = append(_vals, p.Genre)
			case tblcompanyman.IsActivate:
				if p.IsActivate == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyman.IsActivate.Quote())
				_vals = append(_vals, p.IsActivate)
			case tblcompanyman.LoginTime:
				if p.LoginTime.IsZero() {
					continue
				}
				_cols = append(_cols, tblcompanyman.LoginTime.Quote())
				_vals = append(_vals, p.LoginTime)
			case tblcompanyman.State:
				if p.State == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyman.State.Quote())
				_vals = append(_vals, p.State)
			case tblcompanyman.Ctime:
				if p.Ctime.IsZero() {
					continue
				}
				_cols = append(_cols, tblcompanyman.Ctime.Quote())
				_vals = append(_vals, p.Ctime)
			case tblcompanyman.Utime:
				if p.Utime.IsZero() {
					continue
				}
				_cols = append(_cols, tblcompanyman.Utime.Quote())
				_vals = append(_vals, p.Utime)
			}
		}
		return _cols, _vals
	}

	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		switch arg {
		case tblcompanyman.Id:
			_cols = append(_cols, tblcompanyman.Id.Quote())
			_vals = append(_vals, p.Id)
		case tblcompanyman.AccountId:
			_cols = append(_cols, tblcompanyman.AccountId.Quote())
			_vals = append(_vals, p.AccountId)
		case tblcompanyman.Company:
			_cols = append(_cols, tblcompanyman.Company.Quote())
			_vals = append(_vals, p.Company)
		case tblcompanyman.RealName:
			_cols = append(_cols, tblcompanyman.RealName.Quote())
			_vals = append(_vals, p.RealName)
		case tblcompanyman.Email:
			_cols = append(_cols, tblcompanyman.Email.Quote())
			_vals = append(_vals, p.Email)
		case tblcompanyman.Roles:
			_cols = append(_cols, tblcompanyman.Roles.Quote())
			_vals = append(_vals, p.Roles)
		case tblcompanyman.Gender:
			_cols = append(_cols, tblcompanyman.Gender.Quote())
			_vals = append(_vals, p.Gender)
		case tblcompanyman.Genre:
			_cols = append(_cols, tblcompanyman.Genre.Quote())
			_vals = append(_vals, p.Genre)
		case tblcompanyman.IsActivate:
			_cols = append(_cols, tblcompanyman.IsActivate.Quote())
			_vals = append(_vals, p.IsActivate)
		case tblcompanyman.LoginTime:
			_cols = append(_cols, tblcompanyman.LoginTime.Quote())
			_vals = append(_vals, p.LoginTime)
		case tblcompanyman.State:
			_cols = append(_cols, tblcompanyman.State.Quote())
			_vals = append(_vals, p.State)
		case tblcompanyman.Ctime:
			_cols = append(_cols, tblcompanyman.Ctime.Quote())
			_vals = append(_vals, p.Ctime)
		case tblcompanyman.Utime:
			_cols = append(_cols, tblcompanyman.Utime.Quote())
			_vals = append(_vals, p.Utime)
		}
	}
	return _cols, _vals
}

func (p *CompanyMan) AssignKeys() (dialect.Field, any) {
	return tblcompanyman.PrimaryKey, p.Id
}

func (p *CompanyMan) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
