// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblcompanyfadada"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const CompanyFadadaTableName = "company_fadada"

var (
	companyfadadaPool = pool.New(app.Context, func() any {
		_obj := &CompanyFadada{}
		return _obj
	})
)

func NewCompanyFadada() *CompanyFadada {
	_obj := companyfadadaPool.Get().(*CompanyFadada)
	return _obj
}

// MarshalJSON
func (p *CompanyFadada) MarshalJSON() ([]byte, error) {
	var (
		_buf   bytes.Buffer
		_comma bool
	)
	_buf.WriteByte('{')
	_buf.Grow(14 * 50)

	writeField := func(key string, value string) {
		if _comma {
			_buf.WriteByte(',')
		}
		_buf.WriteByte('"')
		_buf.WriteString(key)
		_buf.WriteString(`":`)
		_buf.WriteString(value)
		_comma = true
	}
	if p.Id != 0 {
		writeField("id", types.Marshal(p.Id))
	}
	if p.CompanyName != "" {
		writeField("company_name", types.Marshal(p.CompanyName))
	}
	if p.CustomerId != "" {
		writeField("customer_id", types.Marshal(p.CustomerId))
	}
	if p.TransactionNo != "" {
		writeField("transaction_no", types.Marshal(p.TransactionNo))
	}
	if p.Url != "" {
		writeField("url", types.Marshal(p.Url))
	}
	if p.CertInfo != "" {
		writeField("cert_info", types.Marshal(p.CertInfo))
	}
	if p.Status != 0 {
		writeField("status", types.Marshal(p.Status))
	}
	if p.HasCertificate != 0 {
		writeField("has_certificate", types.Marshal(p.HasCertificate))
	}
	if p.AuthSign != 0 {
		writeField("auth_sign", types.Marshal(p.AuthSign))
	}
	if p.AuthTransactionId != "" {
		writeField("auth_transaction_id", types.Marshal(p.AuthTransactionId))
	}
	if p.AuthContractId != "" {
		writeField("auth_contract_id", types.Marshal(p.AuthContractId))
	}
	if p.AuthResult != "" {
		writeField("auth_result", types.Marshal(p.AuthResult))
	}
	if p.State != 0 {
		writeField("state", types.Marshal(p.State))
	}
	if !p.Ctime.IsZero() {
		writeField("ctime", types.Marshal(p.Ctime))
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *CompanyFadada) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "company_name":
			p.CompanyName = types.String(value.Str)
		case "customer_id":
			p.CustomerId = types.String(value.Str)
		case "transaction_no":
			p.TransactionNo = types.String(value.Str)
		case "url":
			p.Url = types.String(value.Str)
		case "cert_info":
			p.CertInfo = types.String(value.Str)
		case "status":
			p.Status = types.Int8(value.Int())
		case "has_certificate":
			p.HasCertificate = types.Int8(value.Int())
		case "auth_sign":
			p.AuthSign = types.Int8(value.Int())
		case "auth_transaction_id":
			p.AuthTransactionId = types.String(value.Str)
		case "auth_contract_id":
			p.AuthContractId = types.String(value.Str)
		case "auth_result":
			p.AuthResult = types.String(value.Str)
		case "state":
			p.State = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *CompanyFadada) Free() {
	if p == nil {
		return
	}

	companyfadadaPool.Put(p)
}

// Reset
func (p *CompanyFadada) Reset() {
	p.Id = 0
	p.CompanyName = ""
	p.CustomerId = ""
	p.TransactionNo = ""
	p.Url = ""
	p.CertInfo = ""
	p.Status = 0
	p.HasCertificate = 0
	p.AuthSign = 0
	p.AuthTransactionId = ""
	p.AuthContractId = ""
	p.AuthResult = ""
	p.State = 0
	p.Ctime = types.Time{}

}

func (p *CompanyFadada) TableName() string {
	return CompanyFadadaTableName
}

// 定义一个映射表，将字段与对应的指针获取函数关联
var companyfadadaFieldToPtrFunc = map[dialect.Field]func(*CompanyFadada) any{
	tblcompanyfadada.Id:                func(p *CompanyFadada) any { return &p.Id },
	tblcompanyfadada.CompanyName:       func(p *CompanyFadada) any { return &p.CompanyName },
	tblcompanyfadada.CustomerId:        func(p *CompanyFadada) any { return &p.CustomerId },
	tblcompanyfadada.TransactionNo:     func(p *CompanyFadada) any { return &p.TransactionNo },
	tblcompanyfadada.Url:               func(p *CompanyFadada) any { return &p.Url },
	tblcompanyfadada.CertInfo:          func(p *CompanyFadada) any { return &p.CertInfo },
	tblcompanyfadada.Status:            func(p *CompanyFadada) any { return &p.Status },
	tblcompanyfadada.HasCertificate:    func(p *CompanyFadada) any { return &p.HasCertificate },
	tblcompanyfadada.AuthSign:          func(p *CompanyFadada) any { return &p.AuthSign },
	tblcompanyfadada.AuthTransactionId: func(p *CompanyFadada) any { return &p.AuthTransactionId },
	tblcompanyfadada.AuthContractId:    func(p *CompanyFadada) any { return &p.AuthContractId },
	tblcompanyfadada.AuthResult:        func(p *CompanyFadada) any { return &p.AuthResult },
	tblcompanyfadada.State:             func(p *CompanyFadada) any { return &p.State },
	tblcompanyfadada.Ctime:             func(p *CompanyFadada) any { return &p.Ctime },
}

// AssignPtr 根据传入的字段参数，返回对应字段的指针切片。
// 如果未传入任何字段参数，则默认使用 ReadableFields 中的字段。
// 参数 args 为可变参数，代表需要获取指针的字段。
// 返回值为一个包含对应字段指针的切片。
func (p *CompanyFadada) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblcompanyfadada.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		if ptrFunc, ok := companyfadadaFieldToPtrFunc[col]; ok {
			_vals = append(_vals, ptrFunc(p))
		}
	}

	return _vals
}

func (p *CompanyFadada) Scan(rows *sql.Rows, args ...dialect.Field) ([]*CompanyFadada, bool, error) {
	defer rows.Close()
	company_fadadas := make([]*CompanyFadada, 0)

	if len(args) == 0 {
		args = tblcompanyfadada.ReadableFields
	}

	for rows.Next() {
		_p := NewCompanyFadada()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		company_fadadas = append(company_fadadas, _p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return company_fadadas, len(company_fadadas) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyFadada) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tblcompanyfadada.WritableFields
	}
	return p.AssignValues(args...)
}

// 定义字段到值检查和获取函数的映射
var companyfadadaFieldToValueFunc = map[dialect.Field]func(*CompanyFadada) (string, any, bool){
	tblcompanyfadada.Id: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.Id.Quote(), p.Id, p.Id == 0
	},
	tblcompanyfadada.CompanyName: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.CompanyName.Quote(), p.CompanyName, p.CompanyName == ""
	},
	tblcompanyfadada.CustomerId: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.CustomerId.Quote(), p.CustomerId, p.CustomerId == ""
	},
	tblcompanyfadada.TransactionNo: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.TransactionNo.Quote(), p.TransactionNo, p.TransactionNo == ""
	},
	tblcompanyfadada.Url: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.Url.Quote(), p.Url, p.Url == ""
	},
	tblcompanyfadada.CertInfo: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.CertInfo.Quote(), p.CertInfo, p.CertInfo == ""
	},
	tblcompanyfadada.Status: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.Status.Quote(), p.Status, p.Status == 0
	},
	tblcompanyfadada.HasCertificate: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.HasCertificate.Quote(), p.HasCertificate, p.HasCertificate == 0
	},
	tblcompanyfadada.AuthSign: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.AuthSign.Quote(), p.AuthSign, p.AuthSign == 0
	},
	tblcompanyfadada.AuthTransactionId: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.AuthTransactionId.Quote(), p.AuthTransactionId, p.AuthTransactionId == ""
	},
	tblcompanyfadada.AuthContractId: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.AuthContractId.Quote(), p.AuthContractId, p.AuthContractId == ""
	},
	tblcompanyfadada.AuthResult: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.AuthResult.Quote(), p.AuthResult, p.AuthResult == ""
	},
	tblcompanyfadada.State: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.State.Quote(), p.State, p.State == 0
	},
	tblcompanyfadada.Ctime: func(p *CompanyFadada) (string, any, bool) {
		return tblcompanyfadada.Ctime.Quote(), p.Ctime, p.Ctime.IsZero()
	},
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyFadada) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)
	if _lens > 0 {
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			if valueFunc, exists := companyfadadaFieldToValueFunc[arg]; exists {
				colName, value, _ := valueFunc(p)
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
		return _cols, _vals
	}

	args = tblcompanyfadada.WritableFields
	_lens = len(args)
	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		if valueFunc, exists := companyfadadaFieldToValueFunc[arg]; exists {
			colName, value, valid := valueFunc(p)
			if !valid {
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
	}
	return _cols, _vals
}

//
func (p *CompanyFadada) AssignKeys() (dialect.Field, any) {
	return tblcompanyfadada.PrimaryKey, p.Id
}

//
func (p *CompanyFadada) AssignPrimaryKeyValues(result sql.Result) error {
	return nil
}
