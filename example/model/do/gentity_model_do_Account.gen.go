// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblaccount"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const AccountTableName = "account"

var (
	accountPool = pool.New(app.Context, func() any {
		_obj := &Account{}
		return _obj
	})
)

func NewAccount() *Account {
	_obj := accountPool.Get().(*Account)
	return _obj
}

// MarshalJSON
func (p *Account) MarshalJSON() ([]byte, error) {
	var (
		_buf   = bytes.NewBuffer((make([]byte, 0, 6*50)))
		_comma bool
	)
	_buf.WriteByte('{')

	writeField := func(key string, value string) {
		if _comma {
			_buf.WriteByte(',')
		}
		_buf.WriteByte('"')
		_buf.WriteString(key)
		_buf.WriteString(`":`)
		_buf.WriteString(value)
		_comma = true
	}
	if p.Id != 0 {
		writeField("id", types.Marshal(p.Id))
	}
	if p.LoginName != "" {
		writeField("login_name", types.Marshal(p.LoginName))
	}
	if p.Password != "" {
		writeField("password", types.Marshal(p.Password))
	}
	if p.State != 0 {
		writeField("state", types.Marshal(p.State))
	}
	if !p.Ctime.IsZero() {
		writeField("ctime", types.Marshal(p.Ctime))
	}
	if !p.Utime.IsZero() {
		writeField("utime", types.Marshal(p.Utime))
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *Account) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "login_name":
			p.LoginName = types.String(value.Str)
		case "password":
			p.Password = types.String(value.Str)
		case "state":
			p.State = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		case "utime":
			p.Utime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *Account) Free() {
	if p == nil {
		return
	}

	accountPool.Put(p)
}

// Reset
func (p *Account) Reset() {
	p.Id = 0
	p.LoginName = ""
	p.Password = ""
	p.State = 0
	p.Ctime = types.Time{}
	p.Utime = types.Time{}

}

func (p *Account) TableName() string {
	return AccountTableName
}

// 定义一个映射表，将字段与对应的指针获取函数关联
var accountFieldToPtrFunc = map[dialect.Field]func(*Account) any{
	tblaccount.Id:        func(p *Account) any { return &p.Id },
	tblaccount.LoginName: func(p *Account) any { return &p.LoginName },
	tblaccount.Password:  func(p *Account) any { return &p.Password },
	tblaccount.State:     func(p *Account) any { return &p.State },
	tblaccount.Ctime:     func(p *Account) any { return &p.Ctime },
	tblaccount.Utime:     func(p *Account) any { return &p.Utime },
}

// AssignPtr 根据传入的字段参数，返回对应字段的指针切片。
// 如果未传入任何字段参数，则默认使用 ReadableFields 中的字段。
// 参数 args 为可变参数，代表需要获取指针的字段。
// 返回值为一个包含对应字段指针的切片。
func (p *Account) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblaccount.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		if ptrFunc, ok := accountFieldToPtrFunc[col]; ok {
			_vals = append(_vals, ptrFunc(p))
		}
	}

	return _vals
}

func (p *Account) Scan(rows *sql.Rows, args ...dialect.Field) ([]*Account, bool, error) {
	defer rows.Close()
	accounts := make([]*Account, 0)

	if len(args) == 0 {
		args = tblaccount.ReadableFields
	}

	for rows.Next() {
		_p := NewAccount()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		accounts = append(accounts, _p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return accounts, len(accounts) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *Account) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tblaccount.WritableFields
	}
	return p.AssignValues(args...)
}

// 定义字段到值检查和获取函数的映射
var accountFieldToValueFunc = map[dialect.Field]func(*Account) (string, any, bool){
	tblaccount.Id: func(p *Account) (string, any, bool) {
		return tblaccount.Id.Quote(), p.Id, p.Id == 0
	},
	tblaccount.LoginName: func(p *Account) (string, any, bool) {
		return tblaccount.LoginName.Quote(), p.LoginName, p.LoginName == ""
	},
	tblaccount.Password: func(p *Account) (string, any, bool) {
		return tblaccount.Password.Quote(), p.Password, p.Password == ""
	},
	tblaccount.State: func(p *Account) (string, any, bool) {
		return tblaccount.State.Quote(), p.State, p.State == 0
	},
	tblaccount.Ctime: func(p *Account) (string, any, bool) {
		return tblaccount.Ctime.Quote(), p.Ctime, p.Ctime.IsZero()
	},
	tblaccount.Utime: func(p *Account) (string, any, bool) {
		return tblaccount.Utime.Quote(), p.Utime, p.Utime.IsZero()
	},
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *Account) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)
	if _lens > 0 {
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			if valueFunc, exists := accountFieldToValueFunc[arg]; exists {
				colName, value, _ := valueFunc(p)
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
		return _cols, _vals
	}

	args = tblaccount.WritableFields
	_lens = len(args)
	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		if valueFunc, exists := accountFieldToValueFunc[arg]; exists {
			colName, value, valid := valueFunc(p)
			if !valid {
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
	}
	return _cols, _vals
}

//
func (p *Account) AssignKeys() (dialect.Field, any) {
	return tblaccount.PrimaryKey, p.Id
}

//
func (p *Account) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
