// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblcompanystamp"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const CompanyStampTableName = "company_stamp"

var (
	companystampPool = pool.New(app.Context, func() any {
		_obj := &CompanyStamp{}
		_obj.UUID()
		return _obj
	})
)

func NewCompanyStamp() *CompanyStamp {
	_obj := companystampPool.Get().(*CompanyStamp)
	return _obj
}

// MarshalJSON
func (p *CompanyStamp) MarshalJSON() ([]byte, error) {
	var _buf = bytes.NewBuffer(nil)
	_buf.WriteByte('{')
	if p.Id != 0 {
		_buf.WriteString(`"id":` + types.Marshal(p.Id) + `,`)
	}
	if p.CompanyId != 0 {
		_buf.WriteString(`"company_id":` + types.Marshal(p.CompanyId) + `,`)
	}
	if p.Url != "" {
		_buf.WriteString(`"url":` + types.Marshal(p.Url) + `,`)
	}
	if p.Genre != 0 {
		_buf.WriteString(`"genre":` + types.Marshal(p.Genre) + `,`)
	}
	if p.IsDefault != 0 {
		_buf.WriteString(`"is_default":` + types.Marshal(p.IsDefault) + `,`)
	}
	if p.Creator != 0 {
		_buf.WriteString(`"creator":` + types.Marshal(p.Creator) + `,`)
	}
	if p.CreatorName != "" {
		_buf.WriteString(`"creator_name":` + types.Marshal(p.CreatorName) + `,`)
	}
	if p.Department != "" {
		_buf.WriteString(`"department":` + types.Marshal(p.Department) + `,`)
	}
	if p.Position != "" {
		_buf.WriteString(`"position":` + types.Marshal(p.Position) + `,`)
	}
	if p.State != 0 {
		_buf.WriteString(`"state":` + types.Marshal(p.State) + `,`)
	}
	if p.Status != 0 {
		_buf.WriteString(`"status":` + types.Marshal(p.Status) + `,`)
	}
	if !p.Ctime.IsZero() {
		_buf.WriteString(`"ctime":` + types.Marshal(p.Ctime) + `,`)
	}
	if !p.Utime.IsZero() {
		_buf.WriteString(`"utime":` + types.Marshal(p.Utime) + `,`)
	}
	if l := _buf.Len(); l > 1 {
		_buf.Truncate(l - 1)
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *CompanyStamp) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.Money(value.Uint())
		case "company_id":
			p.CompanyId = types.Money(value.Uint())
		case "url":
			p.Url = types.String(value.Str)
		case "genre":
			p.Genre = types.Int8(value.Int())
		case "is_default":
			p.IsDefault = types.Int8(value.Int())
		case "creator":
			p.Creator = types.BigInt(value.Uint())
		case "creator_name":
			p.CreatorName = types.String(value.Str)
		case "department":
			p.Department = types.String(value.Str)
		case "position":
			p.Position = types.String(value.Str)
		case "state":
			p.State = types.Int8(value.Int())
		case "status":
			p.Status = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		case "utime":
			p.Utime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *CompanyStamp) Free() {
	if p == nil {
		return
	}

	companystampPool.Put(p)
}

// Reset
func (p *CompanyStamp) Reset() {
	p.Id = 0
	p.CompanyId = 0
	p.Url = ""
	p.Genre = 0
	p.IsDefault = 0
	p.Creator = 0
	p.CreatorName = ""
	p.Department = ""
	p.Position = ""
	p.State = 0
	p.Status = 0
	p.Ctime = types.Time{}
	p.Utime = types.Time{}

}

func (p *CompanyStamp) TableName() string {
	return CompanyStampTableName
}

func (p *CompanyStamp) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblcompanystamp.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		switch col {
		case tblcompanystamp.Id:
			_vals = append(_vals, &p.Id)
		case tblcompanystamp.CompanyId:
			_vals = append(_vals, &p.CompanyId)
		case tblcompanystamp.Url:
			_vals = append(_vals, &p.Url)
		case tblcompanystamp.Genre:
			_vals = append(_vals, &p.Genre)
		case tblcompanystamp.IsDefault:
			_vals = append(_vals, &p.IsDefault)
		case tblcompanystamp.Creator:
			_vals = append(_vals, &p.Creator)
		case tblcompanystamp.CreatorName:
			_vals = append(_vals, &p.CreatorName)
		case tblcompanystamp.Department:
			_vals = append(_vals, &p.Department)
		case tblcompanystamp.Position:
			_vals = append(_vals, &p.Position)
		case tblcompanystamp.State:
			_vals = append(_vals, &p.State)
		case tblcompanystamp.Status:
			_vals = append(_vals, &p.Status)
		case tblcompanystamp.Ctime:
			_vals = append(_vals, &p.Ctime)
		case tblcompanystamp.Utime:
			_vals = append(_vals, &p.Utime)
		}
	}

	return _vals
}

func (p *CompanyStamp) Scan(rows *sql.Rows, args ...dialect.Field) ([]*CompanyStamp, bool, error) {
	defer rows.Close()
	company_stamps := make([]*CompanyStamp, 0)

	if len(args) == 0 {
		args = tblcompanystamp.ReadableFields
	}

	for rows.Next() {
		_p := NewCompanyStamp()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		company_stamps = append(company_stamps, _p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return company_stamps, len(company_stamps) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyStamp) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tblcompanystamp.WritableFields
	}
	return p.AssignValues(args...)
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyStamp) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)

	if len(args) == 0 {
		args = tblcompanystamp.WritableFields
		_lens = len(args)
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			switch arg {
			case tblcompanystamp.Id:
				if p.Id == 0 {
					continue
				}
				_cols = append(_cols, tblcompanystamp.Id.Quote())
				_vals = append(_vals, p.Id)
			case tblcompanystamp.CompanyId:
				if p.CompanyId == 0 {
					continue
				}
				_cols = append(_cols, tblcompanystamp.CompanyId.Quote())
				_vals = append(_vals, p.CompanyId)
			case tblcompanystamp.Url:
				if p.Url == "" {
					continue
				}
				_cols = append(_cols, tblcompanystamp.Url.Quote())
				_vals = append(_vals, p.Url)
			case tblcompanystamp.Genre:
				if p.Genre == 0 {
					continue
				}
				_cols = append(_cols, tblcompanystamp.Genre.Quote())
				_vals = append(_vals, p.Genre)
			case tblcompanystamp.IsDefault:
				if p.IsDefault == 0 {
					continue
				}
				_cols = append(_cols, tblcompanystamp.IsDefault.Quote())
				_vals = append(_vals, p.IsDefault)
			case tblcompanystamp.Creator:
				if p.Creator == 0 {
					continue
				}
				_cols = append(_cols, tblcompanystamp.Creator.Quote())
				_vals = append(_vals, p.Creator)
			case tblcompanystamp.CreatorName:
				if p.CreatorName == "" {
					continue
				}
				_cols = append(_cols, tblcompanystamp.CreatorName.Quote())
				_vals = append(_vals, p.CreatorName)
			case tblcompanystamp.Department:
				if p.Department == "" {
					continue
				}
				_cols = append(_cols, tblcompanystamp.Department.Quote())
				_vals = append(_vals, p.Department)
			case tblcompanystamp.Position:
				if p.Position == "" {
					continue
				}
				_cols = append(_cols, tblcompanystamp.Position.Quote())
				_vals = append(_vals, p.Position)
			case tblcompanystamp.State:
				if p.State == 0 {
					continue
				}
				_cols = append(_cols, tblcompanystamp.State.Quote())
				_vals = append(_vals, p.State)
			case tblcompanystamp.Status:
				if p.Status == 0 {
					continue
				}
				_cols = append(_cols, tblcompanystamp.Status.Quote())
				_vals = append(_vals, p.Status)
			case tblcompanystamp.Ctime:
				if p.Ctime.IsZero() {
					continue
				}
				_cols = append(_cols, tblcompanystamp.Ctime.Quote())
				_vals = append(_vals, p.Ctime)
			case tblcompanystamp.Utime:
				if p.Utime.IsZero() {
					continue
				}
				_cols = append(_cols, tblcompanystamp.Utime.Quote())
				_vals = append(_vals, p.Utime)
			}
		}
		return _cols, _vals
	}

	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		switch arg {
		case tblcompanystamp.Id:
			_cols = append(_cols, tblcompanystamp.Id.Quote())
			_vals = append(_vals, p.Id)
		case tblcompanystamp.CompanyId:
			_cols = append(_cols, tblcompanystamp.CompanyId.Quote())
			_vals = append(_vals, p.CompanyId)
		case tblcompanystamp.Url:
			_cols = append(_cols, tblcompanystamp.Url.Quote())
			_vals = append(_vals, p.Url)
		case tblcompanystamp.Genre:
			_cols = append(_cols, tblcompanystamp.Genre.Quote())
			_vals = append(_vals, p.Genre)
		case tblcompanystamp.IsDefault:
			_cols = append(_cols, tblcompanystamp.IsDefault.Quote())
			_vals = append(_vals, p.IsDefault)
		case tblcompanystamp.Creator:
			_cols = append(_cols, tblcompanystamp.Creator.Quote())
			_vals = append(_vals, p.Creator)
		case tblcompanystamp.CreatorName:
			_cols = append(_cols, tblcompanystamp.CreatorName.Quote())
			_vals = append(_vals, p.CreatorName)
		case tblcompanystamp.Department:
			_cols = append(_cols, tblcompanystamp.Department.Quote())
			_vals = append(_vals, p.Department)
		case tblcompanystamp.Position:
			_cols = append(_cols, tblcompanystamp.Position.Quote())
			_vals = append(_vals, p.Position)
		case tblcompanystamp.State:
			_cols = append(_cols, tblcompanystamp.State.Quote())
			_vals = append(_vals, p.State)
		case tblcompanystamp.Status:
			_cols = append(_cols, tblcompanystamp.Status.Quote())
			_vals = append(_vals, p.Status)
		case tblcompanystamp.Ctime:
			_cols = append(_cols, tblcompanystamp.Ctime.Quote())
			_vals = append(_vals, p.Ctime)
		case tblcompanystamp.Utime:
			_cols = append(_cols, tblcompanystamp.Utime.Quote())
			_vals = append(_vals, p.Utime)
		}
	}
	return _cols, _vals
}

func (p *CompanyStamp) AssignKeys() (dialect.Field, any) {
	return tblcompanystamp.PrimaryKey, p.Id
}

func (p *CompanyStamp) AssignPrimaryKeyValues(result sql.Result) error {
	return nil
}
