// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tbldocumenttemplate"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const DocumentTemplateTableName = "document_template"

var (
	documenttemplatePool = pool.New(app.Context, func() any {
		_obj := &DocumentTemplate{}
		return _obj
	})
)

func NewDocumentTemplate() *DocumentTemplate {
	_obj := documenttemplatePool.Get().(*DocumentTemplate)
	return _obj
}

// MarshalJSON
func (p *DocumentTemplate) MarshalJSON() ([]byte, error) {
	var (
		_buf   = bytes.NewBuffer((make([]byte, 0, 11*50)))
		_comma bool
	)
	_buf.WriteByte('{')

	writeField := func(key string, value string) {
		if _comma {
			_buf.WriteByte(',')
		}
		_buf.WriteByte('"')
		_buf.WriteString(key)
		_buf.WriteString(`":`)
		_buf.WriteString(value)
		_comma = true
	}
	if p.Id != 0 {
		writeField("id", types.Marshal(p.Id))
	}
	if p.Genre != 0 {
		writeField("genre", types.Marshal(p.Genre))
	}
	if p.Company != 0 {
		writeField("company", types.Marshal(p.Company))
	}
	if p.Way != 0 {
		writeField("way", types.Marshal(p.Way))
	}
	if p.AuthSign != 0 {
		writeField("auth_sign", types.Marshal(p.AuthSign))
	}
	if p.Title != "" {
		writeField("title", types.Marshal(p.Title))
	}
	if p.Content != "" {
		writeField("content", types.Marshal(p.Content))
	}
	if p.Url != "" {
		writeField("url", types.Marshal(p.Url))
	}
	if p.HasForm != 0 {
		writeField("has_form", types.Marshal(p.HasForm))
	}
	if p.State != 0 {
		writeField("state", types.Marshal(p.State))
	}
	if !p.Utime.IsZero() {
		writeField("utime", types.Marshal(p.Utime))
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *DocumentTemplate) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "genre":
			p.Genre = types.Int8(value.Int())
		case "company":
			p.Company = types.BigInt(value.Uint())
		case "way":
			p.Way = types.Int8(value.Int())
		case "auth_sign":
			p.AuthSign = types.Int8(value.Int())
		case "title":
			p.Title = types.String(value.Str)
		case "content":
			p.Content = types.String(value.Str)
		case "url":
			p.Url = types.String(value.Str)
		case "has_form":
			p.HasForm = types.Int8(value.Int())
		case "state":
			p.State = types.Int8(value.Int())
		case "utime":
			p.Utime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *DocumentTemplate) Free() {
	if p == nil {
		return
	}

	documenttemplatePool.Put(p)
}

// Reset
func (p *DocumentTemplate) Reset() {
	p.Id = 0
	p.Genre = 0
	p.Company = 0
	p.Way = 0
	p.AuthSign = 0
	p.Title = ""
	p.Content = ""
	p.Url = ""
	p.HasForm = 0
	p.State = 0
	p.Utime = types.Time{}

}

func (p *DocumentTemplate) TableName() string {
	return DocumentTemplateTableName
}

// 定义一个映射表，将字段与对应的指针获取函数关联
var documenttemplateFieldToPtrFunc = map[dialect.Field]func(*DocumentTemplate) any{
	tbldocumenttemplate.Id:       func(p *DocumentTemplate) any { return &p.Id },
	tbldocumenttemplate.Genre:    func(p *DocumentTemplate) any { return &p.Genre },
	tbldocumenttemplate.Company:  func(p *DocumentTemplate) any { return &p.Company },
	tbldocumenttemplate.Way:      func(p *DocumentTemplate) any { return &p.Way },
	tbldocumenttemplate.AuthSign: func(p *DocumentTemplate) any { return &p.AuthSign },
	tbldocumenttemplate.Title:    func(p *DocumentTemplate) any { return &p.Title },
	tbldocumenttemplate.Content:  func(p *DocumentTemplate) any { return &p.Content },
	tbldocumenttemplate.Url:      func(p *DocumentTemplate) any { return &p.Url },
	tbldocumenttemplate.HasForm:  func(p *DocumentTemplate) any { return &p.HasForm },
	tbldocumenttemplate.State:    func(p *DocumentTemplate) any { return &p.State },
	tbldocumenttemplate.Utime:    func(p *DocumentTemplate) any { return &p.Utime },
}

// AssignPtr 根据传入的字段参数，返回对应字段的指针切片。
// 如果未传入任何字段参数，则默认使用 ReadableFields 中的字段。
// 参数 args 为可变参数，代表需要获取指针的字段。
// 返回值为一个包含对应字段指针的切片。
func (p *DocumentTemplate) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tbldocumenttemplate.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		if ptrFunc, ok := documenttemplateFieldToPtrFunc[col]; ok {
			_vals = append(_vals, ptrFunc(p))
		}
	}

	return _vals
}

func (p *DocumentTemplate) Scan(rows *sql.Rows, args ...dialect.Field) ([]*DocumentTemplate, bool, error) {
	defer rows.Close()
	document_templates := make([]*DocumentTemplate, 0)

	if len(args) == 0 {
		args = tbldocumenttemplate.ReadableFields
	}

	for rows.Next() {
		_p := NewDocumentTemplate()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		document_templates = append(document_templates, _p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return document_templates, len(document_templates) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *DocumentTemplate) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tbldocumenttemplate.WritableFields
	}
	return p.AssignValues(args...)
}

// 定义字段到值检查和获取函数的映射
var documenttemplateFieldToValueFunc = map[dialect.Field]func(*DocumentTemplate) (string, any, bool){
	tbldocumenttemplate.Id: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.Id.Quote(), p.Id, p.Id == 0
	},
	tbldocumenttemplate.Genre: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.Genre.Quote(), p.Genre, p.Genre == 0
	},
	tbldocumenttemplate.Company: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.Company.Quote(), p.Company, p.Company == 0
	},
	tbldocumenttemplate.Way: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.Way.Quote(), p.Way, p.Way == 0
	},
	tbldocumenttemplate.AuthSign: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.AuthSign.Quote(), p.AuthSign, p.AuthSign == 0
	},
	tbldocumenttemplate.Title: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.Title.Quote(), p.Title, p.Title == ""
	},
	tbldocumenttemplate.Content: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.Content.Quote(), p.Content, p.Content == ""
	},
	tbldocumenttemplate.Url: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.Url.Quote(), p.Url, p.Url == ""
	},
	tbldocumenttemplate.HasForm: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.HasForm.Quote(), p.HasForm, p.HasForm == 0
	},
	tbldocumenttemplate.State: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.State.Quote(), p.State, p.State == 0
	},
	tbldocumenttemplate.Utime: func(p *DocumentTemplate) (string, any, bool) {
		return tbldocumenttemplate.Utime.Quote(), p.Utime, p.Utime.IsZero()
	},
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *DocumentTemplate) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)
	if _lens > 0 {
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			if valueFunc, exists := documenttemplateFieldToValueFunc[arg]; exists {
				colName, value, _ := valueFunc(p)
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
		return _cols, _vals
	}

	args = tbldocumenttemplate.WritableFields
	_lens = len(args)
	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		if valueFunc, exists := documenttemplateFieldToValueFunc[arg]; exists {
			colName, value, valid := valueFunc(p)
			if !valid {
				_cols = append(_cols, colName)
				_vals = append(_vals, value)
			}
		}
	}
	return _cols, _vals
}

func (p *DocumentTemplate) AssignKeys() (dialect.Field, any) {
	return tbldocumenttemplate.PrimaryKey, p.Id
}

func (p *DocumentTemplate) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
