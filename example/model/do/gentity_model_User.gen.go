// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"database/sql"
	"github.com/linbaozhong/gentity/example/model/define/table/tbluser"
	"github.com/linbaozhong/gentity/pkg/ace"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/types"
)

const UserTableName = "user"

var (
	userPool = pool.New(ace.Context, func() any {
		obj := &User{}
		obj.UUID()
		return obj
	})
)

func NewUser() *User {
	obj := userPool.Get().(*User)
	return obj
}

// Free
func (p *User) Free() {
	if p == nil {
		return
	}

	userPool.Put(p)
}

// Reset
func (p *User) Reset() {
	p.Id = 0
	p.Uuid = ""
	p.Ctime = types.Time{}

}

func (p *User) TableName() string {
	return UserTableName
}

func (p *User) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tbluser.ReadableFields
	}

	vals := make([]any, 0, len(args))
	for _, col := range args {
		switch col {
		case tbluser.Id:
			vals = append(vals, &p.Id)
		case tbluser.Uuid:
			vals = append(vals, &p.Uuid)
		case tbluser.Ctime:
			vals = append(vals, &p.Ctime)
		}
	}

	return vals
}

func (p *User) Scan(rows *sql.Rows, args ...dialect.Field) ([]*User, bool, error) {
	defer rows.Close()
	users := make([]*User, 0)

	if len(args) == 0 {
		args = tbluser.ReadableFields
	}

	for rows.Next() {
		p := NewUser()
		vals := p.AssignPtr(args...)
		err := rows.Scan(vals...)
		if err != nil {
			return nil, false, err
		}
		users = append(users, p)
	}
	if err := rows.Err(); err != nil {
		return nil, false, err
	}
	if len(users) == 0 {
		return nil, false, sql.ErrNoRows
	}
	return users, true, nil
}

func (p *User) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		lens = len(args)
		cols []string
		vals []any
	)

	if len(args) == 0 {
		args = tbluser.WritableFields
		lens = len(args)
		cols = make([]string, 0, lens)
		vals = make([]any, 0, lens)
		for _, arg := range args {
			switch arg {
			case tbluser.Id:
				if p.Id == 0 {
					continue
				}
				cols = append(cols, tbluser.Id.Quote())
				vals = append(vals, p.Id)
			case tbluser.Uuid:
				if p.Uuid == "" {
					continue
				}
				cols = append(cols, tbluser.Uuid.Quote())
				vals = append(vals, p.Uuid)
			case tbluser.Ctime:
				if p.Ctime.IsZero() {
					continue
				}
				cols = append(cols, tbluser.Ctime.Quote())
				vals = append(vals, p.Ctime)
			}
		}
		return cols, vals
	}

	cols = make([]string, 0, lens)
	vals = make([]any, 0, lens)
	for _, arg := range args {
		switch arg {
		case tbluser.Id:
			cols = append(cols, tbluser.Id.Quote())
			vals = append(vals, p.Id)
		case tbluser.Uuid:
			cols = append(cols, tbluser.Uuid.Quote())
			vals = append(vals, p.Uuid)
		case tbluser.Ctime:
			cols = append(cols, tbluser.Ctime.Quote())
			vals = append(vals, p.Ctime)
		}
	}
	return cols, vals
}

func (p *User) AssignKeys() (dialect.Field, any) {
	return tbluser.PrimaryKey, p.Id
}

func (p *User) AssignPrimaryKeyValues(result sql.Result) error {
	id, err := result.LastInsertId()
	if err != nil {
		return err
	}
	p.Id = types.BigInt(id)
	return nil
}
