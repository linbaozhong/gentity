// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package do

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tbluserlog"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const UserLogTableName = "user_log"

var (
	userlogPool = pool.New(app.Context, func() any {
		_obj := &UserLog{}
		_obj.UUID()
		return _obj
	})
)

func NewUserLog() *UserLog {
	_obj := userlogPool.Get().(*UserLog)
	return _obj
}

// MarshalJSON
func (p *UserLog) MarshalJSON() ([]byte, error) {
	var _buf = bytes.NewBuffer(nil)
	_buf.WriteByte('{')
	if p.Id != 0 {
		_buf.WriteString(`"id":` + types.Marshal(p.Id) + `,`)
	}
	if p.UserId != 0 {
		_buf.WriteString(`"user_id":` + types.Marshal(p.UserId) + `,`)
	}
	if !p.LoginTime.IsZero() {
		_buf.WriteString(`"login_time":` + types.Marshal(p.LoginTime) + `,`)
	}
	if p.Device != "" {
		_buf.WriteString(`"device":` + types.Marshal(p.Device) + `,`)
	}
	if p.Os != "" {
		_buf.WriteString(`"os":` + types.Marshal(p.Os) + `,`)
	}
	if p.OsVersion != "" {
		_buf.WriteString(`"os_version":` + types.Marshal(p.OsVersion) + `,`)
	}
	if p.AppName != "" {
		_buf.WriteString(`"app_name":` + types.Marshal(p.AppName) + `,`)
	}
	if p.AppVersion != "" {
		_buf.WriteString(`"app_version":` + types.Marshal(p.AppVersion) + `,`)
	}
	if p.Ip != "" {
		_buf.WriteString(`"ip":` + types.Marshal(p.Ip) + `,`)
	}
	if p.User != nil {
		_buf.WriteString(`"user":` + types.Marshal(p.User) + `,`)
	}
	if l := _buf.Len(); l > 1 {
		_buf.Truncate(l - 1)
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *UserLog) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			e = types.Unmarshal(value, &p.Id, types.BigInt(value.Uint()))
		case "user_id":
			e = types.Unmarshal(value, &p.UserId, types.BigInt(value.Uint()))
		case "login_time":
			e = types.Unmarshal(value, &p.LoginTime, types.Time{Time: value.Time()})
		case "device":
			e = types.Unmarshal(value, &p.Device, types.String(value.Str))
		case "os":
			e = types.Unmarshal(value, &p.Os, types.String(value.Str))
		case "os_version":
			e = types.Unmarshal(value, &p.OsVersion, types.String(value.Str))
		case "app_name":
			e = types.Unmarshal(value, &p.AppName, types.String(value.Str))
		case "app_version":
			e = types.Unmarshal(value, &p.AppVersion, types.String(value.Str))
		case "ip":
			e = types.Unmarshal(value, &p.Ip, types.String(value.Str))
		case "user":
			e = types.Unmarshal(value, &p.User, func(value gjson.Result) User {
				var obj User
				e := types.Unmarshal(value, &obj)
				if e != nil {
					panic(e)
				}
				return obj
			}(value))
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *UserLog) Free() {
	if p == nil {
		return
	}

	userlogPool.Put(p)
}

// Reset
func (p *UserLog) Reset() {
	p.Id = 0
	p.UserId = 0
	p.LoginTime = types.Time{}
	p.Device = ""
	p.Os = ""
	p.OsVersion = ""
	p.AppName = ""
	p.AppVersion = ""
	p.Ip = ""
	p.User = User{}

}

func (p *UserLog) TableName() string {
	return UserLogTableName
}

func (p *UserLog) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tbluserlog.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		switch col {
		case tbluserlog.Id:
			_vals = append(_vals, &p.Id)
		case tbluserlog.UserId:
			_vals = append(_vals, &p.UserId)
		case tbluserlog.LoginTime:
			_vals = append(_vals, &p.LoginTime)
		case tbluserlog.Device:
			_vals = append(_vals, &p.Device)
		case tbluserlog.Os:
			_vals = append(_vals, &p.Os)
		case tbluserlog.OsVersion:
			_vals = append(_vals, &p.OsVersion)
		case tbluserlog.AppName:
			_vals = append(_vals, &p.AppName)
		case tbluserlog.AppVersion:
			_vals = append(_vals, &p.AppVersion)
		case tbluserlog.Ip:
			_vals = append(_vals, &p.Ip)
		case tbluserlog.User:
			_vals = append(_vals, &p.User)
		}
	}

	return _vals
}

func (p *UserLog) Scan(rows *sql.Rows, args ...dialect.Field) ([]UserLog, bool, error) {
	defer rows.Close()
	user_logs := make([]UserLog, 0)

	if len(args) == 0 {
		args = tbluserlog.ReadableFields
	}

	for rows.Next() {
		_p := NewUserLog()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		user_logs = append(user_logs, *_p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	if len(user_logs) == 0 {
		return nil, false, sql.ErrNoRows
	}
	return user_logs, true, nil
}

func (p *UserLog) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)

	if len(args) == 0 {
		args = tbluserlog.WritableFields
		_lens = len(args)
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			switch arg {
			case tbluserlog.Id:
				if p.Id == 0 {
					continue
				}
				_cols = append(_cols, tbluserlog.Id.Quote())
				_vals = append(_vals, p.Id)
			case tbluserlog.UserId:
				if p.UserId == 0 {
					continue
				}
				_cols = append(_cols, tbluserlog.UserId.Quote())
				_vals = append(_vals, p.UserId)
			case tbluserlog.LoginTime:
				if p.LoginTime.IsZero() {
					continue
				}
				_cols = append(_cols, tbluserlog.LoginTime.Quote())
				_vals = append(_vals, p.LoginTime)
			case tbluserlog.Device:
				if p.Device == "" {
					continue
				}
				_cols = append(_cols, tbluserlog.Device.Quote())
				_vals = append(_vals, p.Device)
			case tbluserlog.Os:
				if p.Os == "" {
					continue
				}
				_cols = append(_cols, tbluserlog.Os.Quote())
				_vals = append(_vals, p.Os)
			case tbluserlog.OsVersion:
				if p.OsVersion == "" {
					continue
				}
				_cols = append(_cols, tbluserlog.OsVersion.Quote())
				_vals = append(_vals, p.OsVersion)
			case tbluserlog.AppName:
				if p.AppName == "" {
					continue
				}
				_cols = append(_cols, tbluserlog.AppName.Quote())
				_vals = append(_vals, p.AppName)
			case tbluserlog.AppVersion:
				if p.AppVersion == "" {
					continue
				}
				_cols = append(_cols, tbluserlog.AppVersion.Quote())
				_vals = append(_vals, p.AppVersion)
			case tbluserlog.Ip:
				if p.Ip == "" {
					continue
				}
				_cols = append(_cols, tbluserlog.Ip.Quote())
				_vals = append(_vals, p.Ip)
			}
		}
		return _cols, _vals
	}

	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		switch arg {
		case tbluserlog.Id:
			_cols = append(_cols, tbluserlog.Id.Quote())
			_vals = append(_vals, p.Id)
		case tbluserlog.UserId:
			_cols = append(_cols, tbluserlog.UserId.Quote())
			_vals = append(_vals, p.UserId)
		case tbluserlog.LoginTime:
			_cols = append(_cols, tbluserlog.LoginTime.Quote())
			_vals = append(_vals, p.LoginTime)
		case tbluserlog.Device:
			_cols = append(_cols, tbluserlog.Device.Quote())
			_vals = append(_vals, p.Device)
		case tbluserlog.Os:
			_cols = append(_cols, tbluserlog.Os.Quote())
			_vals = append(_vals, p.Os)
		case tbluserlog.OsVersion:
			_cols = append(_cols, tbluserlog.OsVersion.Quote())
			_vals = append(_vals, p.OsVersion)
		case tbluserlog.AppName:
			_cols = append(_cols, tbluserlog.AppName.Quote())
			_vals = append(_vals, p.AppName)
		case tbluserlog.AppVersion:
			_cols = append(_cols, tbluserlog.AppVersion.Quote())
			_vals = append(_vals, p.AppVersion)
		case tbluserlog.Ip:
			_cols = append(_cols, tbluserlog.Ip.Quote())
			_vals = append(_vals, p.Ip)
		}
	}
	return _cols, _vals
}

func (p *UserLog) AssignKeys() (dialect.Field, any) {
	return tbluserlog.PrimaryKey, p.Id
}

func (p *UserLog) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
