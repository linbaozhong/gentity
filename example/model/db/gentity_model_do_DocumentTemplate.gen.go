// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package db

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tbldocumenttemplate"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const DocumentTemplateTableName = "document_template"

var (
	documenttemplatePool = pool.New(app.Context,func() any {
		_obj := &DocumentTemplate{}
		_obj.UUID()
		return _obj
	})
)

func NewDocumentTemplate() *DocumentTemplate {
	_obj := documenttemplatePool.Get().(*DocumentTemplate)
	return _obj
}

// MarshalJSON
func (p *DocumentTemplate) MarshalJSON() ([]byte, error) {
	var _buf = bytes.NewBuffer(nil)
	_buf.WriteByte('{')
		if p.Id != 0 {
			_buf.WriteString(`"id":`+types.Marshal(p.Id)+`,`)
		}
		if p.Genre != 0 {
			_buf.WriteString(`"genre":`+types.Marshal(p.Genre)+`,`)
		}
		if p.Company != 0 {
			_buf.WriteString(`"company":`+types.Marshal(p.Company)+`,`)
		}
		if p.Way != 0 {
			_buf.WriteString(`"way":`+types.Marshal(p.Way)+`,`)
		}
		if p.AuthSign != 0 {
			_buf.WriteString(`"auth_sign":`+types.Marshal(p.AuthSign)+`,`)
		}
		if p.Title != "" {
			_buf.WriteString(`"title":`+types.Marshal(p.Title)+`,`)
		}
		if p.Content != "" {
			_buf.WriteString(`"content":`+types.Marshal(p.Content)+`,`)
		}
		if p.Url != "" {
			_buf.WriteString(`"url":`+types.Marshal(p.Url)+`,`)
		}
		if p.HasForm != 0 {
			_buf.WriteString(`"has_form":`+types.Marshal(p.HasForm)+`,`)
		}
		if p.State != 0 {
			_buf.WriteString(`"state":`+types.Marshal(p.State)+`,`)
		}
		if !p.Utime.IsZero() {
			_buf.WriteString(`"utime":`+types.Marshal(p.Utime)+`,`)
		}
	if l := _buf.Len(); l > 1 {
		_buf.Truncate(l - 1)
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *DocumentTemplate) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
			case "id":
				e = types.Unmarshal(value, &p.Id,p.Id = types.BigInt(value.Uint()))
			case "genre":
				e = types.Unmarshal(value, &p.Genre,p.Genre = types.Int8(value.Int()))
			case "company":
				e = types.Unmarshal(value, &p.Company,p.Company = types.Money(value.Uint()))
			case "way":
				e = types.Unmarshal(value, &p.Way,p.Way = types.Int8(value.Int()))
			case "auth_sign":
				e = types.Unmarshal(value, &p.AuthSign,p.AuthSign = types.Int8(value.Int()))
			case "title":
				e = types.Unmarshal(value, &p.Title,p.Title = types.String(value.Str))
			case "content":
				e = types.Unmarshal(value, &p.Content,p.Content = types.String(value.Str))
			case "url":
				e = types.Unmarshal(value, &p.Url,p.Url = types.String(value.Str))
			case "has_form":
				e = types.Unmarshal(value, &p.HasForm,p.HasForm = types.Int8(value.Int()))
			case "state":
				e = types.Unmarshal(value, &p.State,p.State = types.Int8(value.Int()))
			case "utime":
				e = types.Unmarshal(value, &p.Utime,p.Utime = types.Time{Time: value.Time()})
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *DocumentTemplate) Free() {
	if p == nil {
		return
	}

	documenttemplatePool.Put(p)
}

// Reset
func (p *DocumentTemplate) Reset() {
	p.Id = 0
	p.Genre = 0
	p.Company = 0
	p.Way = 0
	p.AuthSign = 0
	p.Title = ""
	p.Content = ""
	p.Url = ""
	p.HasForm = 0
	p.State = 0
	p.Utime = types.Time{}
	
}


func (p *DocumentTemplate) TableName() string {
	return DocumentTemplateTableName
}

func (p *DocumentTemplate) AssignPtr(args ...dialect.Field) ([]any) {
	if len(args) == 0 {
		args = tbldocumenttemplate.ReadableFields
	}

    _vals := make([]any, 0, len(args))
    for _, col := range args {
        switch col {
        case tbldocumenttemplate.Id:
            _vals = append(_vals, &p.Id)
        case tbldocumenttemplate.Genre:
            _vals = append(_vals, &p.Genre)
        case tbldocumenttemplate.Company:
            _vals = append(_vals, &p.Company)
        case tbldocumenttemplate.Way:
            _vals = append(_vals, &p.Way)
        case tbldocumenttemplate.AuthSign:
            _vals = append(_vals, &p.AuthSign)
        case tbldocumenttemplate.Title:
            _vals = append(_vals, &p.Title)
        case tbldocumenttemplate.Content:
            _vals = append(_vals, &p.Content)
        case tbldocumenttemplate.Url:
            _vals = append(_vals, &p.Url)
        case tbldocumenttemplate.HasForm:
            _vals = append(_vals, &p.HasForm)
        case tbldocumenttemplate.State:
            _vals = append(_vals, &p.State)
        case tbldocumenttemplate.Utime:
            _vals = append(_vals, &p.Utime)
        }
    }

	return _vals
}

func (p *DocumentTemplate) Scan(rows *sql.Rows, args ...dialect.Field) ([]DocumentTemplate, bool, error) {
	defer rows.Close()
	document_templates := make([]DocumentTemplate, 0)

	if len(args) == 0 {
		args = tbldocumenttemplate.ReadableFields
	}

	for rows.Next() {
		_p := NewDocumentTemplate()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		document_templates = append(document_templates, *_p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	if len(document_templates) == 0 {
		return nil, false, sql.ErrNoRows
	}
	return document_templates, true, nil
}

func (p *DocumentTemplate)AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)

	if len(args) == 0 {
		args = tbldocumenttemplate.WritableFields
		_lens = len(args)
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			switch arg {
			case tbldocumenttemplate.Id:
				if p.Id == 0 {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.Id.Quote())
				_vals = append(_vals, p.Id)
			case tbldocumenttemplate.Genre:
				if p.Genre == 0 {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.Genre.Quote())
				_vals = append(_vals, p.Genre)
			case tbldocumenttemplate.Company:
				if p.Company == 0 {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.Company.Quote())
				_vals = append(_vals, p.Company)
			case tbldocumenttemplate.Way:
				if p.Way == 0 {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.Way.Quote())
				_vals = append(_vals, p.Way)
			case tbldocumenttemplate.AuthSign:
				if p.AuthSign == 0 {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.AuthSign.Quote())
				_vals = append(_vals, p.AuthSign)
			case tbldocumenttemplate.Title:
				if p.Title == "" {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.Title.Quote())
				_vals = append(_vals, p.Title)
			case tbldocumenttemplate.Content:
				if p.Content == "" {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.Content.Quote())
				_vals = append(_vals, p.Content)
			case tbldocumenttemplate.Url:
				if p.Url == "" {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.Url.Quote())
				_vals = append(_vals, p.Url)
			case tbldocumenttemplate.HasForm:
				if p.HasForm == 0 {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.HasForm.Quote())
				_vals = append(_vals, p.HasForm)
			case tbldocumenttemplate.State:
				if p.State == 0 {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.State.Quote())
				_vals = append(_vals, p.State)
			case tbldocumenttemplate.Utime:
				if p.Utime.IsZero() {
					continue
				}
				_cols = append(_cols, tbldocumenttemplate.Utime.Quote())
				_vals = append(_vals, p.Utime)
			}
		}
		return _cols, _vals
	}

	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		switch arg {
		case tbldocumenttemplate.Id:
			_cols = append(_cols, tbldocumenttemplate.Id.Quote())
			_vals = append(_vals, p.Id)
		case tbldocumenttemplate.Genre:
			_cols = append(_cols, tbldocumenttemplate.Genre.Quote())
			_vals = append(_vals, p.Genre)
		case tbldocumenttemplate.Company:
			_cols = append(_cols, tbldocumenttemplate.Company.Quote())
			_vals = append(_vals, p.Company)
		case tbldocumenttemplate.Way:
			_cols = append(_cols, tbldocumenttemplate.Way.Quote())
			_vals = append(_vals, p.Way)
		case tbldocumenttemplate.AuthSign:
			_cols = append(_cols, tbldocumenttemplate.AuthSign.Quote())
			_vals = append(_vals, p.AuthSign)
		case tbldocumenttemplate.Title:
			_cols = append(_cols, tbldocumenttemplate.Title.Quote())
			_vals = append(_vals, p.Title)
		case tbldocumenttemplate.Content:
			_cols = append(_cols, tbldocumenttemplate.Content.Quote())
			_vals = append(_vals, p.Content)
		case tbldocumenttemplate.Url:
			_cols = append(_cols, tbldocumenttemplate.Url.Quote())
			_vals = append(_vals, p.Url)
		case tbldocumenttemplate.HasForm:
			_cols = append(_cols, tbldocumenttemplate.HasForm.Quote())
			_vals = append(_vals, p.HasForm)
		case tbldocumenttemplate.State:
			_cols = append(_cols, tbldocumenttemplate.State.Quote())
			_vals = append(_vals, p.State)
		case tbldocumenttemplate.Utime:
			_cols = append(_cols, tbldocumenttemplate.Utime.Quote())
			_vals = append(_vals, p.Utime)
		}
	}
	return _cols, _vals
}

//
func (p *DocumentTemplate) AssignKeys() (dialect.Field, any) {
	return tbldocumenttemplate.PrimaryKey,p.Id
}


//
func (p *DocumentTemplate) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
        return e
    }
    p.Id = types.BigInt(_id)
    return nil
}
