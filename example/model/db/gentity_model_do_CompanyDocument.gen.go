// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package db

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblcompanydocument"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const CompanyDocumentTableName = "company_document"

var (
	companydocumentPool = pool.New(app.Context, func() any {
		_obj := &CompanyDocument{}
		_obj.UUID()
		return _obj
	})
)

func NewCompanyDocument() *CompanyDocument {
	_obj := companydocumentPool.Get().(*CompanyDocument)
	return _obj
}

// MarshalJSON
func (p *CompanyDocument) MarshalJSON() ([]byte, error) {
	var _buf = bytes.NewBuffer(nil)
	_buf.WriteByte('{')
	if p.Id != 0 {
		_buf.WriteString(`"id":` + types.Marshal(p.Id) + `,`)
	}
	if p.CompanyId != 0 {
		_buf.WriteString(`"company_id":` + types.Marshal(p.CompanyId) + `,`)
	}
	if p.TemplateId != 0 {
		_buf.WriteString(`"template_id":` + types.Marshal(p.TemplateId) + `,`)
	}
	if p.Title != "" {
		_buf.WriteString(`"title":` + types.Marshal(p.Title) + `,`)
	}
	if p.Classify != 0 {
		_buf.WriteString(`"classify":` + types.Marshal(p.Classify) + `,`)
	}
	if p.Genre != 0 {
		_buf.WriteString(`"genre":` + types.Marshal(p.Genre) + `,`)
	}
	if p.HandleGenre != 0 {
		_buf.WriteString(`"handle_genre":` + types.Marshal(p.HandleGenre) + `,`)
	}
	if p.Job != "" {
		_buf.WriteString(`"job":` + types.Marshal(p.Job) + `,`)
	}
	if p.VariableMode != 0 {
		_buf.WriteString(`"variable_mode":` + types.Marshal(p.VariableMode) + `,`)
	}
	if p.IsDefault != 0 {
		_buf.WriteString(`"is_default":` + types.Marshal(p.IsDefault) + `,`)
	}
	if p.CanDefault != 0 {
		_buf.WriteString(`"can_default":` + types.Marshal(p.CanDefault) + `,`)
	}
	if p.Modifier != 0 {
		_buf.WriteString(`"modifier":` + types.Marshal(p.Modifier) + `,`)
	}
	if p.State != 0 {
		_buf.WriteString(`"state":` + types.Marshal(p.State) + `,`)
	}
	if !p.Ctime.IsZero() {
		_buf.WriteString(`"ctime":` + types.Marshal(p.Ctime) + `,`)
	}
	if l := _buf.Len(); l > 1 {
		_buf.Truncate(l - 1)
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *CompanyDocument) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "company_id":
			p.CompanyId = types.BigInt(value.Uint())
		case "template_id":
			p.TemplateId = types.Money(value.Uint())
		case "title":
			p.Title = types.String(value.Str)
		case "classify":
			p.Classify = types.Int8(value.Int())
		case "genre":
			p.Genre = types.Int8(value.Int())
		case "handle_genre":
			p.HandleGenre = types.Int8(value.Int())
		case "job":
			p.Job = types.String(value.Str)
		case "variable_mode":
			p.VariableMode = types.Int32(value.Int())
		case "is_default":
			p.IsDefault = types.Int8(value.Int())
		case "can_default":
			p.CanDefault = types.Int8(value.Int())
		case "modifier":
			p.Modifier = types.Money(value.Uint())
		case "state":
			p.State = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *CompanyDocument) Free() {
	if p == nil {
		return
	}

	companydocumentPool.Put(p)
}

// Reset
func (p *CompanyDocument) Reset() {
	p.Id = 0
	p.CompanyId = 0
	p.TemplateId = 0
	p.Title = ""
	p.Classify = 0
	p.Genre = 0
	p.HandleGenre = 0
	p.Job = ""
	p.VariableMode = 0
	p.IsDefault = 0
	p.CanDefault = 0
	p.Modifier = 0
	p.State = 0
	p.Ctime = types.Time{}

}

func (p *CompanyDocument) TableName() string {
	return CompanyDocumentTableName
}

func (p *CompanyDocument) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblcompanydocument.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		switch col {
		case tblcompanydocument.Id:
			_vals = append(_vals, &p.Id)
		case tblcompanydocument.CompanyId:
			_vals = append(_vals, &p.CompanyId)
		case tblcompanydocument.TemplateId:
			_vals = append(_vals, &p.TemplateId)
		case tblcompanydocument.Title:
			_vals = append(_vals, &p.Title)
		case tblcompanydocument.Classify:
			_vals = append(_vals, &p.Classify)
		case tblcompanydocument.Genre:
			_vals = append(_vals, &p.Genre)
		case tblcompanydocument.HandleGenre:
			_vals = append(_vals, &p.HandleGenre)
		case tblcompanydocument.Job:
			_vals = append(_vals, &p.Job)
		case tblcompanydocument.VariableMode:
			_vals = append(_vals, &p.VariableMode)
		case tblcompanydocument.IsDefault:
			_vals = append(_vals, &p.IsDefault)
		case tblcompanydocument.CanDefault:
			_vals = append(_vals, &p.CanDefault)
		case tblcompanydocument.Modifier:
			_vals = append(_vals, &p.Modifier)
		case tblcompanydocument.State:
			_vals = append(_vals, &p.State)
		case tblcompanydocument.Ctime:
			_vals = append(_vals, &p.Ctime)
		}
	}

	return _vals
}

func (p *CompanyDocument) Scan(rows *sql.Rows, args ...dialect.Field) ([]CompanyDocument, bool, error) {
	defer rows.Close()
	company_documents := make([]CompanyDocument, 0)

	if len(args) == 0 {
		args = tblcompanydocument.ReadableFields
	}

	for rows.Next() {
		_p := NewCompanyDocument()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		company_documents = append(company_documents, *_p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return company_documents, len(company_documents) > 0, nil
}

func (p *CompanyDocument) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)

	if len(args) == 0 {
		args = tblcompanydocument.WritableFields
		_lens = len(args)
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			switch arg {
			case tblcompanydocument.Id:
				if p.Id == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.Id.Quote())
				_vals = append(_vals, p.Id)
			case tblcompanydocument.CompanyId:
				if p.CompanyId == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.CompanyId.Quote())
				_vals = append(_vals, p.CompanyId)
			case tblcompanydocument.TemplateId:
				if p.TemplateId == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.TemplateId.Quote())
				_vals = append(_vals, p.TemplateId)
			case tblcompanydocument.Title:
				if p.Title == "" {
					continue
				}
				_cols = append(_cols, tblcompanydocument.Title.Quote())
				_vals = append(_vals, p.Title)
			case tblcompanydocument.Classify:
				if p.Classify == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.Classify.Quote())
				_vals = append(_vals, p.Classify)
			case tblcompanydocument.Genre:
				if p.Genre == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.Genre.Quote())
				_vals = append(_vals, p.Genre)
			case tblcompanydocument.HandleGenre:
				if p.HandleGenre == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.HandleGenre.Quote())
				_vals = append(_vals, p.HandleGenre)
			case tblcompanydocument.Job:
				if p.Job == "" {
					continue
				}
				_cols = append(_cols, tblcompanydocument.Job.Quote())
				_vals = append(_vals, p.Job)
			case tblcompanydocument.VariableMode:
				if p.VariableMode == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.VariableMode.Quote())
				_vals = append(_vals, p.VariableMode)
			case tblcompanydocument.IsDefault:
				if p.IsDefault == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.IsDefault.Quote())
				_vals = append(_vals, p.IsDefault)
			case tblcompanydocument.CanDefault:
				if p.CanDefault == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.CanDefault.Quote())
				_vals = append(_vals, p.CanDefault)
			case tblcompanydocument.Modifier:
				if p.Modifier == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.Modifier.Quote())
				_vals = append(_vals, p.Modifier)
			case tblcompanydocument.State:
				if p.State == 0 {
					continue
				}
				_cols = append(_cols, tblcompanydocument.State.Quote())
				_vals = append(_vals, p.State)
			case tblcompanydocument.Ctime:
				if p.Ctime.IsZero() {
					continue
				}
				_cols = append(_cols, tblcompanydocument.Ctime.Quote())
				_vals = append(_vals, p.Ctime)
			}
		}
		return _cols, _vals
	}

	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		switch arg {
		case tblcompanydocument.Id:
			_cols = append(_cols, tblcompanydocument.Id.Quote())
			_vals = append(_vals, p.Id)
		case tblcompanydocument.CompanyId:
			_cols = append(_cols, tblcompanydocument.CompanyId.Quote())
			_vals = append(_vals, p.CompanyId)
		case tblcompanydocument.TemplateId:
			_cols = append(_cols, tblcompanydocument.TemplateId.Quote())
			_vals = append(_vals, p.TemplateId)
		case tblcompanydocument.Title:
			_cols = append(_cols, tblcompanydocument.Title.Quote())
			_vals = append(_vals, p.Title)
		case tblcompanydocument.Classify:
			_cols = append(_cols, tblcompanydocument.Classify.Quote())
			_vals = append(_vals, p.Classify)
		case tblcompanydocument.Genre:
			_cols = append(_cols, tblcompanydocument.Genre.Quote())
			_vals = append(_vals, p.Genre)
		case tblcompanydocument.HandleGenre:
			_cols = append(_cols, tblcompanydocument.HandleGenre.Quote())
			_vals = append(_vals, p.HandleGenre)
		case tblcompanydocument.Job:
			_cols = append(_cols, tblcompanydocument.Job.Quote())
			_vals = append(_vals, p.Job)
		case tblcompanydocument.VariableMode:
			_cols = append(_cols, tblcompanydocument.VariableMode.Quote())
			_vals = append(_vals, p.VariableMode)
		case tblcompanydocument.IsDefault:
			_cols = append(_cols, tblcompanydocument.IsDefault.Quote())
			_vals = append(_vals, p.IsDefault)
		case tblcompanydocument.CanDefault:
			_cols = append(_cols, tblcompanydocument.CanDefault.Quote())
			_vals = append(_vals, p.CanDefault)
		case tblcompanydocument.Modifier:
			_cols = append(_cols, tblcompanydocument.Modifier.Quote())
			_vals = append(_vals, p.Modifier)
		case tblcompanydocument.State:
			_cols = append(_cols, tblcompanydocument.State.Quote())
			_vals = append(_vals, p.State)
		case tblcompanydocument.Ctime:
			_cols = append(_cols, tblcompanydocument.Ctime.Quote())
			_vals = append(_vals, p.Ctime)
		}
	}
	return _cols, _vals
}

func (p *CompanyDocument) AssignKeys() (dialect.Field, any) {
	return tblcompanydocument.PrimaryKey, p.Id
}

func (p *CompanyDocument) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
