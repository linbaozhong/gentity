// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package db

import (
	"database/sql"
	"github.com/linbaozhong/gentity/example/model/define/table/tblbiz"
	"github.com/linbaozhong/gentity/pkg/ace"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"time"
)

const BizTableName = "biz"

var (
	bizPool = pool.New(ace.Context, func() any {
		obj := &Biz{}
		obj.UUID()
		return obj
	})
)

func NewBiz() *Biz {
	obj := bizPool.Get().(*Biz)
	return obj
}

// Free
func (p *Biz) Free() {
	if p == nil {
		return
	}

	bizPool.Put(p)
}

// Reset
func (p *Biz) Reset() {
	p.Id = 0
	p.Platform = ""
	p.CorpId = ""
	p.CorpType = 0
	p.FullCorpName = ""
	p.CorpType2 = 0
	p.CorpName = ""
	p.Industry = ""
	p.IsAuthenticated = false
	p.LicenseCode = ""
	p.CorpLogoUrl = ""
	p.InviteUrl = ""
	p.InviteCode = ""
	p.IsEcologicalCorp = false
	p.AuthLevel = 0
	p.AuthChannel = ""
	p.AuthChannelType = ""
	p.State = 0
	p.StateTime = time.Time{}
	p.CreatedTime = time.Time{}

}

func (p *Biz) TableName() string {
	return BizTableName
}

func (p *Biz) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblbiz.ReadableFields
	}

	vals := make([]any, 0, len(args))
	for _, col := range args {
		switch col {
		case tblbiz.Id:
			vals = append(vals, &p.Id)
		case tblbiz.Platform:
			vals = append(vals, &p.Platform)
		case tblbiz.CorpId:
			vals = append(vals, &p.CorpId)
		case tblbiz.CorpType:
			vals = append(vals, &p.CorpType)
		case tblbiz.FullCorpName:
			vals = append(vals, &p.FullCorpName)
		case tblbiz.CorpType2:
			vals = append(vals, &p.CorpType2)
		case tblbiz.CorpName:
			vals = append(vals, &p.CorpName)
		case tblbiz.Industry:
			vals = append(vals, &p.Industry)
		case tblbiz.IsAuthenticated:
			vals = append(vals, &p.IsAuthenticated)
		case tblbiz.LicenseCode:
			vals = append(vals, &p.LicenseCode)
		case tblbiz.CorpLogoUrl:
			vals = append(vals, &p.CorpLogoUrl)
		case tblbiz.InviteUrl:
			vals = append(vals, &p.InviteUrl)
		case tblbiz.InviteCode:
			vals = append(vals, &p.InviteCode)
		case tblbiz.IsEcologicalCorp:
			vals = append(vals, &p.IsEcologicalCorp)
		case tblbiz.AuthLevel:
			vals = append(vals, &p.AuthLevel)
		case tblbiz.AuthChannel:
			vals = append(vals, &p.AuthChannel)
		case tblbiz.AuthChannelType:
			vals = append(vals, &p.AuthChannelType)
		case tblbiz.State:
			vals = append(vals, &p.State)
		case tblbiz.StateTime:
			vals = append(vals, &p.StateTime)
		case tblbiz.CreatedTime:
			vals = append(vals, &p.CreatedTime)
		}
	}

	return vals
}

func (p *Biz) Scan(rows *sql.Rows, args ...dialect.Field) ([]*Biz, bool, error) {
	defer rows.Close()
	bizs := make([]*Biz, 0)

	if len(args) == 0 {
		args = tblbiz.ReadableFields
	}

	for rows.Next() {
		p := NewBiz()
		vals := p.AssignPtr(args...)
		err := rows.Scan(vals...)
		if err != nil {
			return nil, false, err
		}
		bizs = append(bizs, p)
	}
	if err := rows.Err(); err != nil {
		return nil, false, err
	}
	if len(bizs) == 0 {
		return nil, false, sql.ErrNoRows
	}
	return bizs, true, nil
}

func (p *Biz) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		lens = len(args)
		cols []string
		vals []any
	)

	if len(args) == 0 {
		args = tblbiz.WritableFields
		lens = len(args)
		cols = make([]string, 0, lens)
		vals = make([]any, 0, lens)
		for _, arg := range args {
			switch arg {
			case tblbiz.Id:
				if p.Id == 0 {
					continue
				}
				cols = append(cols, tblbiz.Id.Quote())
				vals = append(vals, p.Id)
			case tblbiz.Platform:
				if p.Platform == "" {
					continue
				}
				cols = append(cols, tblbiz.Platform.Quote())
				vals = append(vals, p.Platform)
			case tblbiz.CorpId:
				if p.CorpId == "" {
					continue
				}
				cols = append(cols, tblbiz.CorpId.Quote())
				vals = append(vals, p.CorpId)
			case tblbiz.CorpType:
				if p.CorpType == 0 {
					continue
				}
				cols = append(cols, tblbiz.CorpType.Quote())
				vals = append(vals, p.CorpType)
			case tblbiz.FullCorpName:
				if p.FullCorpName == "" {
					continue
				}
				cols = append(cols, tblbiz.FullCorpName.Quote())
				vals = append(vals, p.FullCorpName)
			case tblbiz.CorpType2:
				if p.CorpType2 == 0 {
					continue
				}
				cols = append(cols, tblbiz.CorpType2.Quote())
				vals = append(vals, p.CorpType2)
			case tblbiz.CorpName:
				if p.CorpName == "" {
					continue
				}
				cols = append(cols, tblbiz.CorpName.Quote())
				vals = append(vals, p.CorpName)
			case tblbiz.Industry:
				if p.Industry == "" {
					continue
				}
				cols = append(cols, tblbiz.Industry.Quote())
				vals = append(vals, p.Industry)
			case tblbiz.IsAuthenticated:
				if p.IsAuthenticated == false {
					continue
				}
				cols = append(cols, tblbiz.IsAuthenticated.Quote())
				vals = append(vals, p.IsAuthenticated)
			case tblbiz.LicenseCode:
				if p.LicenseCode == "" {
					continue
				}
				cols = append(cols, tblbiz.LicenseCode.Quote())
				vals = append(vals, p.LicenseCode)
			case tblbiz.CorpLogoUrl:
				if p.CorpLogoUrl == "" {
					continue
				}
				cols = append(cols, tblbiz.CorpLogoUrl.Quote())
				vals = append(vals, p.CorpLogoUrl)
			case tblbiz.InviteUrl:
				if p.InviteUrl == "" {
					continue
				}
				cols = append(cols, tblbiz.InviteUrl.Quote())
				vals = append(vals, p.InviteUrl)
			case tblbiz.InviteCode:
				if p.InviteCode == "" {
					continue
				}
				cols = append(cols, tblbiz.InviteCode.Quote())
				vals = append(vals, p.InviteCode)
			case tblbiz.IsEcologicalCorp:
				if p.IsEcologicalCorp == false {
					continue
				}
				cols = append(cols, tblbiz.IsEcologicalCorp.Quote())
				vals = append(vals, p.IsEcologicalCorp)
			case tblbiz.AuthLevel:
				if p.AuthLevel == 0 {
					continue
				}
				cols = append(cols, tblbiz.AuthLevel.Quote())
				vals = append(vals, p.AuthLevel)
			case tblbiz.AuthChannel:
				if p.AuthChannel == "" {
					continue
				}
				cols = append(cols, tblbiz.AuthChannel.Quote())
				vals = append(vals, p.AuthChannel)
			case tblbiz.AuthChannelType:
				if p.AuthChannelType == "" {
					continue
				}
				cols = append(cols, tblbiz.AuthChannelType.Quote())
				vals = append(vals, p.AuthChannelType)
			case tblbiz.State:
				if p.State == 0 {
					continue
				}
				cols = append(cols, tblbiz.State.Quote())
				vals = append(vals, p.State)
			case tblbiz.StateTime:
				if p.StateTime.IsZero() {
					continue
				}
				cols = append(cols, tblbiz.StateTime.Quote())
				vals = append(vals, p.StateTime)
			case tblbiz.CreatedTime:
				if p.CreatedTime.IsZero() {
					continue
				}
				cols = append(cols, tblbiz.CreatedTime.Quote())
				vals = append(vals, p.CreatedTime)
			}
		}
		return cols, vals
	}

	cols = make([]string, 0, lens)
	vals = make([]any, 0, lens)
	for _, arg := range args {
		switch arg {
		case tblbiz.Id:
			cols = append(cols, tblbiz.Id.Quote())
			vals = append(vals, p.Id)
		case tblbiz.Platform:
			cols = append(cols, tblbiz.Platform.Quote())
			vals = append(vals, p.Platform)
		case tblbiz.CorpId:
			cols = append(cols, tblbiz.CorpId.Quote())
			vals = append(vals, p.CorpId)
		case tblbiz.CorpType:
			cols = append(cols, tblbiz.CorpType.Quote())
			vals = append(vals, p.CorpType)
		case tblbiz.FullCorpName:
			cols = append(cols, tblbiz.FullCorpName.Quote())
			vals = append(vals, p.FullCorpName)
		case tblbiz.CorpType2:
			cols = append(cols, tblbiz.CorpType2.Quote())
			vals = append(vals, p.CorpType2)
		case tblbiz.CorpName:
			cols = append(cols, tblbiz.CorpName.Quote())
			vals = append(vals, p.CorpName)
		case tblbiz.Industry:
			cols = append(cols, tblbiz.Industry.Quote())
			vals = append(vals, p.Industry)
		case tblbiz.IsAuthenticated:
			cols = append(cols, tblbiz.IsAuthenticated.Quote())
			vals = append(vals, p.IsAuthenticated)
		case tblbiz.LicenseCode:
			cols = append(cols, tblbiz.LicenseCode.Quote())
			vals = append(vals, p.LicenseCode)
		case tblbiz.CorpLogoUrl:
			cols = append(cols, tblbiz.CorpLogoUrl.Quote())
			vals = append(vals, p.CorpLogoUrl)
		case tblbiz.InviteUrl:
			cols = append(cols, tblbiz.InviteUrl.Quote())
			vals = append(vals, p.InviteUrl)
		case tblbiz.InviteCode:
			cols = append(cols, tblbiz.InviteCode.Quote())
			vals = append(vals, p.InviteCode)
		case tblbiz.IsEcologicalCorp:
			cols = append(cols, tblbiz.IsEcologicalCorp.Quote())
			vals = append(vals, p.IsEcologicalCorp)
		case tblbiz.AuthLevel:
			cols = append(cols, tblbiz.AuthLevel.Quote())
			vals = append(vals, p.AuthLevel)
		case tblbiz.AuthChannel:
			cols = append(cols, tblbiz.AuthChannel.Quote())
			vals = append(vals, p.AuthChannel)
		case tblbiz.AuthChannelType:
			cols = append(cols, tblbiz.AuthChannelType.Quote())
			vals = append(vals, p.AuthChannelType)
		case tblbiz.State:
			cols = append(cols, tblbiz.State.Quote())
			vals = append(vals, p.State)
		case tblbiz.StateTime:
			cols = append(cols, tblbiz.StateTime.Quote())
			vals = append(vals, p.StateTime)
		case tblbiz.CreatedTime:
			cols = append(cols, tblbiz.CreatedTime.Quote())
			vals = append(vals, p.CreatedTime)
		}
	}
	return cols, vals
}

func (p *Biz) AssignKeys() (dialect.Field, any) {
	return tblbiz.PrimaryKey, p.Id
}

func (p *Biz) AssignPrimaryKeyValues(result sql.Result) error {
	return nil
}
