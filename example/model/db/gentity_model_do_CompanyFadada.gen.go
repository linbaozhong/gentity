// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package db

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblcompanyfadada"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const CompanyFadadaTableName = "company_fadada"

var (
	companyfadadaPool = pool.New(app.Context, func() any {
		_obj := &CompanyFadada{}
		_obj.UUID()
		return _obj
	})
)

func NewCompanyFadada() *CompanyFadada {
	_obj := companyfadadaPool.Get().(*CompanyFadada)
	return _obj
}

// MarshalJSON
func (p *CompanyFadada) MarshalJSON() ([]byte, error) {
	var _buf = bytes.NewBuffer(nil)
	_buf.WriteByte('{')
	if p.Id != 0 {
		_buf.WriteString(`"id":` + types.Marshal(p.Id) + `,`)
	}
	if p.CompanyName != "" {
		_buf.WriteString(`"company_name":` + types.Marshal(p.CompanyName) + `,`)
	}
	if p.CustomerId != "" {
		_buf.WriteString(`"customer_id":` + types.Marshal(p.CustomerId) + `,`)
	}
	if p.TransactionNo != "" {
		_buf.WriteString(`"transaction_no":` + types.Marshal(p.TransactionNo) + `,`)
	}
	if p.Url != "" {
		_buf.WriteString(`"url":` + types.Marshal(p.Url) + `,`)
	}
	if p.CertInfo != "" {
		_buf.WriteString(`"cert_info":` + types.Marshal(p.CertInfo) + `,`)
	}
	if p.Status != 0 {
		_buf.WriteString(`"status":` + types.Marshal(p.Status) + `,`)
	}
	if p.HasCertificate != 0 {
		_buf.WriteString(`"has_certificate":` + types.Marshal(p.HasCertificate) + `,`)
	}
	if p.AuthSign != 0 {
		_buf.WriteString(`"auth_sign":` + types.Marshal(p.AuthSign) + `,`)
	}
	if p.AuthTransactionId != "" {
		_buf.WriteString(`"auth_transaction_id":` + types.Marshal(p.AuthTransactionId) + `,`)
	}
	if p.AuthContractId != "" {
		_buf.WriteString(`"auth_contract_id":` + types.Marshal(p.AuthContractId) + `,`)
	}
	if p.AuthResult != "" {
		_buf.WriteString(`"auth_result":` + types.Marshal(p.AuthResult) + `,`)
	}
	if p.State != 0 {
		_buf.WriteString(`"state":` + types.Marshal(p.State) + `,`)
	}
	if !p.Ctime.IsZero() {
		_buf.WriteString(`"ctime":` + types.Marshal(p.Ctime) + `,`)
	}
	if l := _buf.Len(); l > 1 {
		_buf.Truncate(l - 1)
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *CompanyFadada) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "company_name":
			p.CompanyName = types.String(value.Str)
		case "customer_id":
			p.CustomerId = types.String(value.Str)
		case "transaction_no":
			p.TransactionNo = types.String(value.Str)
		case "url":
			p.Url = types.String(value.Str)
		case "cert_info":
			p.CertInfo = types.String(value.Str)
		case "status":
			p.Status = types.Int8(value.Int())
		case "has_certificate":
			p.HasCertificate = types.Int8(value.Int())
		case "auth_sign":
			p.AuthSign = types.Int8(value.Int())
		case "auth_transaction_id":
			p.AuthTransactionId = types.String(value.Str)
		case "auth_contract_id":
			p.AuthContractId = types.String(value.Str)
		case "auth_result":
			p.AuthResult = types.String(value.Str)
		case "state":
			p.State = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *CompanyFadada) Free() {
	if p == nil {
		return
	}

	companyfadadaPool.Put(p)
}

// Reset
func (p *CompanyFadada) Reset() {
	p.Id = 0
	p.CompanyName = ""
	p.CustomerId = ""
	p.TransactionNo = ""
	p.Url = ""
	p.CertInfo = ""
	p.Status = 0
	p.HasCertificate = 0
	p.AuthSign = 0
	p.AuthTransactionId = ""
	p.AuthContractId = ""
	p.AuthResult = ""
	p.State = 0
	p.Ctime = types.Time{}

}

func (p *CompanyFadada) TableName() string {
	return CompanyFadadaTableName
}

func (p *CompanyFadada) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblcompanyfadada.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		switch col {
		case tblcompanyfadada.Id:
			_vals = append(_vals, &p.Id)
		case tblcompanyfadada.CompanyName:
			_vals = append(_vals, &p.CompanyName)
		case tblcompanyfadada.CustomerId:
			_vals = append(_vals, &p.CustomerId)
		case tblcompanyfadada.TransactionNo:
			_vals = append(_vals, &p.TransactionNo)
		case tblcompanyfadada.Url:
			_vals = append(_vals, &p.Url)
		case tblcompanyfadada.CertInfo:
			_vals = append(_vals, &p.CertInfo)
		case tblcompanyfadada.Status:
			_vals = append(_vals, &p.Status)
		case tblcompanyfadada.HasCertificate:
			_vals = append(_vals, &p.HasCertificate)
		case tblcompanyfadada.AuthSign:
			_vals = append(_vals, &p.AuthSign)
		case tblcompanyfadada.AuthTransactionId:
			_vals = append(_vals, &p.AuthTransactionId)
		case tblcompanyfadada.AuthContractId:
			_vals = append(_vals, &p.AuthContractId)
		case tblcompanyfadada.AuthResult:
			_vals = append(_vals, &p.AuthResult)
		case tblcompanyfadada.State:
			_vals = append(_vals, &p.State)
		case tblcompanyfadada.Ctime:
			_vals = append(_vals, &p.Ctime)
		}
	}

	return _vals
}

func (p *CompanyFadada) Scan(rows *sql.Rows, args ...dialect.Field) ([]CompanyFadada, bool, error) {
	defer rows.Close()
	company_fadadas := make([]CompanyFadada, 0)

	if len(args) == 0 {
		args = tblcompanyfadada.ReadableFields
	}

	for rows.Next() {
		_p := NewCompanyFadada()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		company_fadadas = append(company_fadadas, *_p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	return company_fadadas, len(company_fadadas) > 0, nil
}

// RawAssignValues 向数据库写入数据前，为表列赋值。多用于批量插入和更新
// 如果 args 为空，则赋值所有可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyFadada) RawAssignValues(args ...dialect.Field) ([]string, []any) {
	if len(args) == 0 {
		args = tblcompanyfadada.WritableFields
	}
	return p.AssignValues(args...)
}

// AssignValues 向数据库写入数据前，为表列赋值。
// 如果 args 为空，则将非零值赋与可写字段
// 如果 args 不为空，则只赋值 args 中的字段
func (p *CompanyFadada) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)

	if len(args) == 0 {
		args = tblcompanyfadada.WritableFields
		_lens = len(args)
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			switch arg {
			case tblcompanyfadada.Id:
				if p.Id == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.Id.Quote())
				_vals = append(_vals, p.Id)
			case tblcompanyfadada.CompanyName:
				if p.CompanyName == "" {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.CompanyName.Quote())
				_vals = append(_vals, p.CompanyName)
			case tblcompanyfadada.CustomerId:
				if p.CustomerId == "" {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.CustomerId.Quote())
				_vals = append(_vals, p.CustomerId)
			case tblcompanyfadada.TransactionNo:
				if p.TransactionNo == "" {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.TransactionNo.Quote())
				_vals = append(_vals, p.TransactionNo)
			case tblcompanyfadada.Url:
				if p.Url == "" {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.Url.Quote())
				_vals = append(_vals, p.Url)
			case tblcompanyfadada.CertInfo:
				if p.CertInfo == "" {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.CertInfo.Quote())
				_vals = append(_vals, p.CertInfo)
			case tblcompanyfadada.Status:
				if p.Status == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.Status.Quote())
				_vals = append(_vals, p.Status)
			case tblcompanyfadada.HasCertificate:
				if p.HasCertificate == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.HasCertificate.Quote())
				_vals = append(_vals, p.HasCertificate)
			case tblcompanyfadada.AuthSign:
				if p.AuthSign == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.AuthSign.Quote())
				_vals = append(_vals, p.AuthSign)
			case tblcompanyfadada.AuthTransactionId:
				if p.AuthTransactionId == "" {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.AuthTransactionId.Quote())
				_vals = append(_vals, p.AuthTransactionId)
			case tblcompanyfadada.AuthContractId:
				if p.AuthContractId == "" {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.AuthContractId.Quote())
				_vals = append(_vals, p.AuthContractId)
			case tblcompanyfadada.AuthResult:
				if p.AuthResult == "" {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.AuthResult.Quote())
				_vals = append(_vals, p.AuthResult)
			case tblcompanyfadada.State:
				if p.State == 0 {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.State.Quote())
				_vals = append(_vals, p.State)
			case tblcompanyfadada.Ctime:
				if p.Ctime.IsZero() {
					continue
				}
				_cols = append(_cols, tblcompanyfadada.Ctime.Quote())
				_vals = append(_vals, p.Ctime)
			}
		}
		return _cols, _vals
	}

	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		switch arg {
		case tblcompanyfadada.Id:
			_cols = append(_cols, tblcompanyfadada.Id.Quote())
			_vals = append(_vals, p.Id)
		case tblcompanyfadada.CompanyName:
			_cols = append(_cols, tblcompanyfadada.CompanyName.Quote())
			_vals = append(_vals, p.CompanyName)
		case tblcompanyfadada.CustomerId:
			_cols = append(_cols, tblcompanyfadada.CustomerId.Quote())
			_vals = append(_vals, p.CustomerId)
		case tblcompanyfadada.TransactionNo:
			_cols = append(_cols, tblcompanyfadada.TransactionNo.Quote())
			_vals = append(_vals, p.TransactionNo)
		case tblcompanyfadada.Url:
			_cols = append(_cols, tblcompanyfadada.Url.Quote())
			_vals = append(_vals, p.Url)
		case tblcompanyfadada.CertInfo:
			_cols = append(_cols, tblcompanyfadada.CertInfo.Quote())
			_vals = append(_vals, p.CertInfo)
		case tblcompanyfadada.Status:
			_cols = append(_cols, tblcompanyfadada.Status.Quote())
			_vals = append(_vals, p.Status)
		case tblcompanyfadada.HasCertificate:
			_cols = append(_cols, tblcompanyfadada.HasCertificate.Quote())
			_vals = append(_vals, p.HasCertificate)
		case tblcompanyfadada.AuthSign:
			_cols = append(_cols, tblcompanyfadada.AuthSign.Quote())
			_vals = append(_vals, p.AuthSign)
		case tblcompanyfadada.AuthTransactionId:
			_cols = append(_cols, tblcompanyfadada.AuthTransactionId.Quote())
			_vals = append(_vals, p.AuthTransactionId)
		case tblcompanyfadada.AuthContractId:
			_cols = append(_cols, tblcompanyfadada.AuthContractId.Quote())
			_vals = append(_vals, p.AuthContractId)
		case tblcompanyfadada.AuthResult:
			_cols = append(_cols, tblcompanyfadada.AuthResult.Quote())
			_vals = append(_vals, p.AuthResult)
		case tblcompanyfadada.State:
			_cols = append(_cols, tblcompanyfadada.State.Quote())
			_vals = append(_vals, p.State)
		case tblcompanyfadada.Ctime:
			_cols = append(_cols, tblcompanyfadada.Ctime.Quote())
			_vals = append(_vals, p.Ctime)
		}
	}
	return _cols, _vals
}

//
func (p *CompanyFadada) AssignKeys() (dialect.Field, any) {
	return tblcompanyfadada.PrimaryKey, p.Id
}

//
func (p *CompanyFadada) AssignPrimaryKeyValues(result sql.Result) error {
	return nil
}
