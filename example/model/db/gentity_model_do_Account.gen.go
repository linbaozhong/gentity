// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package db

import (
	"bytes"
	"database/sql"
	"errors"
	"github.com/linbaozhong/gentity/example/model/define/table/tblaccount"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/gjson"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

const AccountTableName = "account"

var (
	accountPool = pool.New(app.Context, func() any {
		_obj := &Account{}
		_obj.UUID()
		return _obj
	})
)

func NewAccount() *Account {
	_obj := accountPool.Get().(*Account)
	return _obj
}

// MarshalJSON
func (p *Account) MarshalJSON() ([]byte, error) {
	var _buf = bytes.NewBuffer(nil)
	_buf.WriteByte('{')
	if p.Id != 0 {
		_buf.WriteString(`"id":` + types.Marshal(p.Id) + `,`)
	}
	if p.LoginName != "" {
		_buf.WriteString(`"login_name":` + types.Marshal(p.LoginName) + `,`)
	}
	if p.Password != "" {
		_buf.WriteString(`"password":` + types.Marshal(p.Password) + `,`)
	}
	if p.State != 0 {
		_buf.WriteString(`"state":` + types.Marshal(p.State) + `,`)
	}
	if !p.Ctime.IsZero() {
		_buf.WriteString(`"ctime":` + types.Marshal(p.Ctime) + `,`)
	}
	if !p.Utime.IsZero() {
		_buf.WriteString(`"utime":` + types.Marshal(p.Utime) + `,`)
	}
	if l := _buf.Len(); l > 1 {
		_buf.Truncate(l - 1)
	}
	_buf.WriteByte('}')
	return _buf.Bytes(), nil
}

// UnmarshalJSON
func (p *Account) UnmarshalJSON(data []byte) error {

	if !gjson.ValidBytes(data) {
		return errors.New("invalid json")
	}
	_result := gjson.ParseBytes(data)
	_result.ForEach(func(key, value gjson.Result) bool {
		var e error
		switch key.Str {
		case "id":
			p.Id = types.BigInt(value.Uint())
		case "login_name":
			p.LoginName = types.String(value.Str)
		case "password":
			p.Password = types.String(value.Str)
		case "state":
			p.State = types.Int8(value.Int())
		case "ctime":
			p.Ctime = types.Time{Time: value.Time()}
		case "utime":
			p.Utime = types.Time{Time: value.Time()}
		}
		if e != nil {
			log.Error(e)
			return false
		}
		return true
	})
	return nil
}

// Free
func (p *Account) Free() {
	if p == nil {
		return
	}

	accountPool.Put(p)
}

// Reset
func (p *Account) Reset() {
	p.Id = 0
	p.LoginName = ""
	p.Password = ""
	p.State = 0
	p.Ctime = types.Time{}
	p.Utime = types.Time{}

}

func (p *Account) TableName() string {
	return AccountTableName
}

func (p *Account) AssignPtr(args ...dialect.Field) []any {
	if len(args) == 0 {
		args = tblaccount.ReadableFields
	}

	_vals := make([]any, 0, len(args))
	for _, col := range args {
		switch col {
		case tblaccount.Id:
			_vals = append(_vals, &p.Id)
		case tblaccount.LoginName:
			_vals = append(_vals, &p.LoginName)
		case tblaccount.Password:
			_vals = append(_vals, &p.Password)
		case tblaccount.State:
			_vals = append(_vals, &p.State)
		case tblaccount.Ctime:
			_vals = append(_vals, &p.Ctime)
		case tblaccount.Utime:
			_vals = append(_vals, &p.Utime)
		}
	}

	return _vals
}

func (p *Account) Scan(rows *sql.Rows, args ...dialect.Field) ([]Account, bool, error) {
	defer rows.Close()
	accounts := make([]Account, 0)

	if len(args) == 0 {
		args = tblaccount.ReadableFields
	}

	for rows.Next() {
		_p := NewAccount()
		_vals := _p.AssignPtr(args...)
		e := rows.Scan(_vals...)
		if e != nil {
			log.Error(e)
			return nil, false, e
		}
		accounts = append(accounts, *_p)
	}
	if e := rows.Err(); e != nil {
		log.Error(e)
		return nil, false, e
	}
	if len(accounts) == 0 {
		return nil, false, sql.ErrNoRows
	}
	return accounts, true, nil
}

func (p *Account) AssignValues(args ...dialect.Field) ([]string, []any) {
	var (
		_lens = len(args)
		_cols []string
		_vals []any
	)

	if len(args) == 0 {
		args = tblaccount.WritableFields
		_lens = len(args)
		_cols = make([]string, 0, _lens)
		_vals = make([]any, 0, _lens)
		for _, arg := range args {
			switch arg {
			case tblaccount.Id:
				if p.Id == 0 {
					continue
				}
				_cols = append(_cols, tblaccount.Id.Quote())
				_vals = append(_vals, p.Id)
			case tblaccount.LoginName:
				if p.LoginName == "" {
					continue
				}
				_cols = append(_cols, tblaccount.LoginName.Quote())
				_vals = append(_vals, p.LoginName)
			case tblaccount.Password:
				if p.Password == "" {
					continue
				}
				_cols = append(_cols, tblaccount.Password.Quote())
				_vals = append(_vals, p.Password)
			case tblaccount.State:
				if p.State == 0 {
					continue
				}
				_cols = append(_cols, tblaccount.State.Quote())
				_vals = append(_vals, p.State)
			case tblaccount.Ctime:
				if p.Ctime.IsZero() {
					continue
				}
				_cols = append(_cols, tblaccount.Ctime.Quote())
				_vals = append(_vals, p.Ctime)
			case tblaccount.Utime:
				if p.Utime.IsZero() {
					continue
				}
				_cols = append(_cols, tblaccount.Utime.Quote())
				_vals = append(_vals, p.Utime)
			}
		}
		return _cols, _vals
	}

	_cols = make([]string, 0, _lens)
	_vals = make([]any, 0, _lens)
	for _, arg := range args {
		switch arg {
		case tblaccount.Id:
			_cols = append(_cols, tblaccount.Id.Quote())
			_vals = append(_vals, p.Id)
		case tblaccount.LoginName:
			_cols = append(_cols, tblaccount.LoginName.Quote())
			_vals = append(_vals, p.LoginName)
		case tblaccount.Password:
			_cols = append(_cols, tblaccount.Password.Quote())
			_vals = append(_vals, p.Password)
		case tblaccount.State:
			_cols = append(_cols, tblaccount.State.Quote())
			_vals = append(_vals, p.State)
		case tblaccount.Ctime:
			_cols = append(_cols, tblaccount.Ctime.Quote())
			_vals = append(_vals, p.Ctime)
		case tblaccount.Utime:
			_cols = append(_cols, tblaccount.Utime.Quote())
			_vals = append(_vals, p.Utime)
		}
	}
	return _cols, _vals
}

func (p *Account) AssignKeys() (dialect.Field, any) {
	return tblaccount.PrimaryKey, p.Id
}

func (p *Account) AssignPrimaryKeyValues(result sql.Result) error {
	_id, e := result.LastInsertId()
	if e != nil {
		return e
	}
	p.Id = types.BigInt(_id)
	return nil
}
