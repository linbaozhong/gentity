// Code generated by github.com/linbaozhong/gentity. DO NOT EDIT.

package dao //companyfadada

import (
	"context"
	"database/sql"
	"github.com/linbaozhong/gentity/example/model/define/table/tblcompanyfadada"
	"github.com/linbaozhong/gentity/example/model/do"
	"github.com/linbaozhong/gentity/pkg/ace"
	"github.com/linbaozhong/gentity/pkg/ace/dialect"
	"github.com/linbaozhong/gentity/pkg/ace/pool"
	"github.com/linbaozhong/gentity/pkg/app"
	"github.com/linbaozhong/gentity/pkg/log"
	"github.com/linbaozhong/gentity/pkg/types"
)

type companyfadada struct {
	pool.Model
	db    ace.Executer
	toSql bool
}

var (
	companyfadadaPool = pool.New(app.Context, func() any {
		_obj := &companyfadada{}
		return _obj
	})
)

// New 实例化companyfadada
// exec: 执行器，用于执行sql语句，如：db,tx
// 如果不传入，则使用默认的db
func CompanyFadada(exec ...ace.Executer) *companyfadada {
	_obj := companyfadadaPool.Get().(*companyfadada)
	_obj.db = ace.GetExec(exec...)
	return _obj
}

// Free 释放对象
func (p *companyfadada) Free() {
	if p == nil {
		return
	}

	companyfadadaPool.Put(p)
}

// Reset 重置对象
func (p *companyfadada) Reset() {
	p.toSql = false
	p.db = nil
}

// ToSql 仅打印SQL语句，不执行
func (p *companyfadada) ToSql() *companyfadada {
	p.toSql = true
	return p
}

// Insert 返回 LastInsertId
func (p *companyfadada) Insert(ctx context.Context, sets ...dialect.Setter) (int64, error) {
	defer p.Free()
	if len(sets) == 0 {
		return 0, dialect.ErrSetterEmpty
	}
	_result, e := ace.Table(do.CompanyFadadaTableName).
		Set(sets...).
		ToSql(p.toSql).
		Create(p.db).
		Exec(ctx)
	if e != nil {
		log.Error(e)
		return 0, e
	}
	return _result.LastInsertId()
}

// InsertOne
// cols: 要插入的列名
func (p *companyfadada) InsertOne(ctx context.Context, bean *do.CompanyFadada, cols ...dialect.Field) (bool, error) {
	defer p.Free()
	_result, e := ace.Table(do.CompanyFadadaTableName).
		Cols(cols...).
		ToSql(p.toSql).
		Create(p.db).
		Struct(ctx, bean)
	if e != nil {
		log.Error(e)
		return false, e
	}

	bean.AssignPrimaryKeyValues(_result)

	_n, e := _result.RowsAffected()
	return _n > 0, e
}

// InsertBatch 批量插入,返回 RowsAffected。禁止在事务中使用
// cols: 要插入的列名，如果为空，则插入结构体字段对应所有列
func (p *companyfadada) InsertBatch(ctx context.Context, beans []*do.CompanyFadada, cols ...dialect.Field) (int64, error) {
	defer p.Free()
	_lens := len(beans)
	if _lens == 0 {
		return 0, dialect.ErrBeanEmpty
	}
	_args := make([]dialect.Modeler, 0, _lens)
	for _, _bean := range beans {
		_args = append(_args, _bean)
	}
	_result, e := ace.Table(do.CompanyFadadaTableName).
		Cols(cols...).
		ToSql(p.toSql).
		Create(p.db).
		BatchStruct(ctx, _args...)
	if e != nil {
		log.Error(e)
		return 0, e
	}

	return _result.RowsAffected()
}

// Update
func (p *companyfadada) Update(ctx context.Context, sets []dialect.Setter, cond ...dialect.Condition) (bool, error) {
	defer p.Free()
	if len(sets) == 0 {
		return false, dialect.ErrSetterEmpty
	}
	_result, e := ace.Table(do.CompanyFadadaTableName).
		Where(cond...).
		Set(sets...).
		ToSql(p.toSql).
		Update(p.db).
		Exec(ctx)
	if e != nil {
		log.Error(e)
		return false, e
	}
	_n, e := _result.RowsAffected()
	return _n >= 0, e
}

// UpdateById
func (p *companyfadada) UpdateById(ctx context.Context, id types.BigInt, sets ...dialect.Setter) (bool, error) {
	return p.Update(ctx,
		sets,
		tblcompanyfadada.PrimaryKey.Eq(id),
	)
}

// UpdateOne
// cols: 要插入的列名
func (p *companyfadada) UpdateOne(ctx context.Context, bean *do.CompanyFadada, cols ...dialect.Field) (bool, error) {
	defer p.Free()
	_result, e := ace.Table(do.CompanyFadadaTableName).
		Cols(cols...).
		ToSql(p.toSql).
		Update(p.db).
		Struct(ctx, bean)
	if e != nil {
		log.Error(e)
		return false, e
	}

	_n, e := _result.RowsAffected()
	return _n >= 0, e
}

// UpdateBatch 批量更新,禁止在事务中使用
// cols: 要更新的列名，如果为空，则更新结构体所有字段对应列，包含零值字段
func (p *companyfadada) UpdateBatch(ctx context.Context, beans []*do.CompanyFadada, cols ...dialect.Field) (bool, error) {
	defer p.Free()
	_lens := len(beans)
	if _lens == 0 {
		return false, dialect.ErrBeanEmpty
	}
	_args := make([]dialect.Modeler, 0, _lens)
	for _, _bean := range beans {
		_args = append(_args, _bean)
	}
	_result, e := ace.Table(do.CompanyFadadaTableName).
		Cols(cols...).
		ToSql(p.toSql).
		Update(p.db).
		BatchStruct(ctx, _args...)
	if e != nil {
		log.Error(e)
		return false, e
	}
	_n, e := _result.RowsAffected()
	return _n >= 0, e
}

// Delete
func (p *companyfadada) Delete(ctx context.Context, cond ...dialect.Condition) (bool, error) {
	defer p.Free()
	_result, e := ace.Table(do.CompanyFadadaTableName).
		Where(cond...).
		ToSql(p.toSql).
		Delete(p.db).
		Exec(ctx)
	if e != nil {
		log.Error(e)
		return false, e
	}
	_n, e := _result.RowsAffected()
	return _n >= 0, e
}

// DeleteById
func (p *companyfadada) DeleteById(ctx context.Context, id types.BigInt) (bool, error) {
	return p.Delete(ctx,
		tblcompanyfadada.PrimaryKey.Eq(id),
	)
}

// Get 查询第一个符合条件的记录
//  s: 选择器，用于构建sql语句
// 返回值:
//  1. *do.CompanyFadada: 第一个符合条件的记录
//  2. bool: 是否存在记录
//  3. error: 错误信息
// 注意:
//  1. 如果没有指定表名，则默认使用do.CompanyFadadaTableName
//  2. 如果没有指定查询列，则默认使用tblcompanyfadada.ReadableFields
//  3. 如果没有指定排序方式，则默认使用dialect.OrderAsc
//  4. 如果没有指定条件，则默认查询所有记录
//  5. 如果查询出错，则返回nil, false, error
//  6. 如果没有查询到记录，则返回nil, false, nil
//  7. 如果查询到记录，则返回记录, true, nil
//  8. 如果查询到多条记录，则返回第一条记录, true, nil
func (p *companyfadada) Get(ctx context.Context, s ace.SelectBuilder) (*do.CompanyFadada, bool, error) {
	defer p.Free()
	if len(s.GetTableName()) == 0 {
		s.Table(do.CompanyFadadaTableName)
	}
	_cols := s.GetCols()
	if len(_cols) == 0 {
		_cols = tblcompanyfadada.ReadableFields
		s.Cols(_cols...)
	}
	_row, e := s.
		ToSql(p.toSql).
		Select(p.db).
		QueryRow(ctx)
	if e != nil {
		log.Error(e)
		return nil, false, e
	}
	_obj := do.NewCompanyFadada()
	e = _row.Scan(_obj.AssignPtr(_cols...)...)
	switch e {
	case nil:
		return _obj, true, nil
	case sql.ErrNoRows:
		return _obj, false, nil
	default:
		log.Error(e)
		return _obj, false, e
	}
}

// GetByID 按主键读取一个company_fadada对象,先判断第二返回值是否为true,再判断是否第三返回值为nil
func (p *companyfadada) GetByID(ctx context.Context, id types.BigInt, cols ...dialect.Field) (*do.CompanyFadada, bool, error) {
	defer p.Free()
	return p.Get(ctx, ace.Table(do.CompanyFadadaTableName).Where(tblcompanyfadada.PrimaryKey.Eq(id)).Cols(cols...))
}

// Cell 查询第一个符合条件的记录的第一个列
//  s: 选择器，用于构建sql语句
// 返回值:
//  1. any: 第一个符合条件的记录的第一个列
//  2. bool: 是否存在记录
//  3. error: 错误信息
// 注意:
//  1. 如果没有指定表名，则默认使用do.CompanyFadadaTableName
//  2. 如果没有指定查询列，则默认使用tblcompanyfadada.PrimaryKey
func (p *companyfadada) Cell(ctx context.Context, s ace.SelectBuilder) (any, bool, error) {
	defer p.Free()
	if len(s.GetTableName()) == 0 {
		s.Table(do.CompanyFadadaTableName)
	}

	if len(s.GetCols()) == 0 {
		s.Cols(tblcompanyfadada.PrimaryKey)
	}
	_row, e := s.
		ToSql(p.toSql).
		Select(p.db).
		QueryRow(ctx)
	if e != nil {
		log.Error(e)
		return nil, false, e
	}
	var _v any
	e = _row.Scan(&_v)
	switch e {
	case nil:
		return _v, true, nil
	case sql.ErrNoRows:
		return _v, false, nil
	default:
		log.Error(e)
		return _v, false, e
	}
}

// List 查询所有符合条件的记录
func (p *companyfadada) List(ctx context.Context, s ace.SelectBuilder) ([]*do.CompanyFadada, bool, error) {
	defer p.Free()
	if len(s.GetTableName()) == 0 {
		s.Table(do.CompanyFadadaTableName)
	}

	_cols := s.GetCols()
	if len(_cols) == 0 {
		_cols = tblcompanyfadada.ReadableFields
		s.Cols(_cols...)
	}

	_rows, e := s.
		ToSql(p.toSql).
		Select(p.db).
		Query(ctx)
	if e != nil {
		log.Error(e)
		return nil, false, e
	}
	defer _rows.Close()

	_obj := do.NewCompanyFadada()
	_objs, has, e := _obj.Scan(_rows, _cols...)
	if has {
		return _objs, true, nil
	}
	if e == nil || e == sql.ErrNoRows {
		return _objs, false, nil
	}
	log.Error(e)
	return _objs, false, e
}

// Count
func (p *companyfadada) Count(ctx context.Context, cond ...dialect.Condition) (int64, error) {
	defer p.Free()
	return ace.Table(do.CompanyFadadaTableName).
		ToSql(p.toSql).
		Select(p.db).
		Count(ctx, cond...)
}

// Sum
func (p *companyfadada) Sum(ctx context.Context, cols []dialect.Field, cond ...dialect.Condition) (map[string]any, error) {
	defer p.Free()
	return ace.Table(do.CompanyFadadaTableName).
		ToSql(p.toSql).
		Select(p.db).
		Sum(ctx, cols, cond...)
}

// Exists
func (p *companyfadada) Exists(ctx context.Context, cond ...dialect.Condition) (bool, error) {
	defer p.Free()
	_c := ace.Table(do.CompanyFadadaTableName).Cols(tblcompanyfadada.PrimaryKey).Where(cond...)
	_row, e := _c.
		ToSql(p.toSql).
		Select(p.db).
		QueryRow(ctx)
	if e != nil {
		log.Error(e)
		return false, e
	}

	var id types.BigInt
	e = _row.Scan(&id)
	switch e {
	case nil:
		return true, nil
	case sql.ErrNoRows:
		return false, nil
	default:
		return false, e
	}
}
